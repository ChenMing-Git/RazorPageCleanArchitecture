@page
@using CleanArchitecture.Razor.Domain.Enums
@using Microsoft.AspNetCore.Mvc.Localization
@using CleanArchitecture.Razor.Application.Constants.Permission
@model AdminLTE.WebUI.Pages.MappingRules.IndexModel
@inject Microsoft.Extensions.Localization.IStringLocalizer<IndexModel> _localizer
@inject Microsoft.AspNetCore.Authorization.IAuthorizationService _authorizationService
@{
    ViewData["Title"] = _localizer["Value Mapping Rule"].Value;
    ViewData["PageName"] = "mappingrules_index";
    ViewData["Category1"] = _localizer["Value Mapping Matrix"].Value;
    ViewData["Heading"] = _localizer["Value Mapping"].Value;
    ViewData["PageDescription"] = _localizer["See all available options"].Value;
    ViewData["PreemptiveClass"] = "Default";
}
@section HeadBlock {


<link rel="stylesheet" media="screen, print" href="~/css/fa-solid.css">
<link rel="stylesheet" media="screen,print" href="~/lib/easyui/themes/insdep/easyui.css">
<!-- Select2 -->
<link rel="stylesheet" href="~/plugins/select2/css/select2.min.css">
<link rel="stylesheet" href="~/plugins/select2-bootstrap4-theme/select2-bootstrap4.css">

<style>
    .datagrid-body
    .mappingrule_dg_datagrid-cell-c1-_action {
        overflow: visible !important
    }

    .small::before,
    small::before {
        content: none !important;
    }

</style>
}
<div id="js-page-content-demopanels" class="card mb-g">
    <div class="card-header bg-white d-flex align-items-center">
        <h4 class="m-0">
            @_localizer["Value Mapping Rule"]
           <div class="progress mb-3">
                <div class="progress-bar progress-bar bg-primary" role="progressbar" style="width: @(Model.Summarizing.First(x=>x.Status=="Not started").Percentage)%">@Model.Summarizing.First(x=>x.Status=="Not started").Total Not started</div>
                <div class="progress-bar progress-bar bg-info" role="progressbar" style="width:  @(Model.Summarizing.First(x=>x.Status=="Ongoing").Percentage)%">@Model.Summarizing.First(x=>x.Status=="Ongoing").Total Ongoing</div>
                <div class="progress-bar progress-bar bg-success" role="progressbar" style="width: @(Model.Summarizing.First(x=>x.Status=="Finished").Percentage)%">@Model.Summarizing.First(x=>x.Status=="Finished").Total Finished</div>
           </div>
        </h4>
        <div class="ml-auto">
            <button class="btn btn-sm btn-outline-primary " id="refreshbutton">
                <span class="@(Settings.Theme.IconPrefix) fa-sync mr-1"></span>
                @_localizer["Refresh"]
            </button>

            <button class="btn btn-sm btn-outline-primary " id="addbutton">
                <span class="@(Settings.Theme.IconPrefix) fa-plus mr-1"></span>
                @_localizer["New"]
            </button>

            <button class="btn btn-sm btn-outline-danger" disabled id="deletebutton">
                <span class="@(Settings.Theme.IconPrefix) fa-trash-alt mr-1"></span>
                @_localizer["Delete"]
            </button>
            <button type="button" id="finishedbutton" class="btn btn-sm btn-outline-primary mr-1">
                <span class="@(Settings.Theme.IconPrefix) fa-check mr-1"></span>
                @_localizer["Finished"]
            </button>
            <button class="btn btn-sm btn-outline-primary " id="downloadtemplatebutton">
                <span class="@(Settings.Theme.IconPrefix) fa-download mr-1"></span>
                @_localizer["Download Value Mapping"]
            </button>


        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-12">
                <table id="mappingrule_dg">
                </table>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="mappingrules_modal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true"><i class="@(Settings.Theme.IconPrefix) fa-times"></i></span>
                </button>
            </div>
            <form id="mappingrule_form" class="needs-validation" novalidate="novalidate">
                <div class="modal-body">
                    @Html.AntiForgeryToken()
                    <input type="hidden" asp-for="Input.Id" />
                    <input type="hidden" asp-for="Input.TemplateFile" />
                    <input type="hidden" asp-for="Input.TemplateDescription" />
                    <div class="form-row">
                        <div class="col-md-12">
                            <label class="form-label" for=""></label>
                            <input type="file" asp-for="TemplateFile" style="display:none" required accept="text/xml" />
                            <div class="">
                                <button name="uploadtemplatebutton" type="button" class="btn btn-primary btn-icon waves-effect waves-themed mr-2">
                                    <i class="fal fa-paperclip"></i> Upload Template File
                                </button><span class="text-danger">*</span>
                                <div id="uploadtemplatefilename">
                                    <div class="alert alert-danger mt-2 mb-2" role="alert">
                                        <i class="fal fa-exclamation-triangle mr-2"></i>   @_localizer["Please upload a value mapping template file."].
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 mb-2">
                            <label class="form-label" for="Name">@_localizer["Mapping Rule Name"] <span class="text-danger">*</span></label>
                            <input type="text" asp-for="Input.Name" class="form-control" placeholder="Name" required="required" />
                            <span class="invalid-feedback" asp-validation-for="Input.Name">Sorry, you missed this one.</span>
                        </div>
                        <div class="col-md-6 mb-2">
                            <label class="form-label" for="Status">@_localizer["Status"] </label>
                            <input type="text" asp-for="Input.Status" class="form-control" placeholder="Status" readonly="readonly" />
                            <span class="invalid-feedback" asp-validation-for="Input.Status">Sorry, you missed this one.</span>
                        </div>
                        <div class="col-md-4 mb-2">
                            <label class="form-label" for="ImportParameterField1">@_localizer["Import Parameter 1 Name"] <span class="text-danger">*</span></label>
                            <input type="text" asp-for="Input.ImportParameterField1" class="form-control" placeholder="" required="required" readonly="readonly" />
                            <span class="invalid-feedback" asp-validation-for="Input.ImportParameterField1">Sorry, you missed this one.</span>
                        </div>
                        <div class="col-md-4 mb-2">
                            <label class="form-label" for="LegacyField1">@_localizer["Legacy Field 1 Name"] <span class="text-danger">*</span></label>
                            <input type="text" list="fieldlist" asp-for="Input.LegacyField1" class="form-control" placeholder="" required="required" autocomplete="off" />

                            <span class="invalid-feedback" asp-validation-for="Input.LegacyField1">Sorry, you missed this one.</span>
                        </div>
                        <div class="col-md-4 mb-2">
                            <label class="form-label" for="LegacyDescription1">@_localizer["Legacy Field 1 Description"] </label>
                            <input type="text" asp-for="Input.LegacyDescription1" class="form-control" placeholder="" autocomplete="off" />
                            <span class="invalid-feedback" asp-validation-for="Input.LegacyDescription1">Sorry, you missed this one.</span>
                        </div>
                        <div class="col-md-4 mb-2">
                            <label class="form-label" for="ImportParameterField2">@_localizer["Legacy Field 2 Description"] </label>
                            <input type="text" asp-for="Input.ImportParameterField2" class="form-control" placeholder="" readonly="readonly" />
                            <span class="invalid-feedback" asp-validation-for="Input.ImportParameterField2">Sorry, you missed this one.</span>
                        </div>
                        <div class="col-md-4 mb-2">
                            <label class="form-label" for="LegacyField2">@_localizer["Legacy Field 2 Name"] </label>
                            <input type="text" list="fieldlist" asp-for="Input.LegacyField2" class="form-control" placeholder="" autocomplete="off" />
                            <span class="invalid-feedback" asp-validation-for="Input.LegacyField2">Sorry, you missed this one.</span>
                        </div>
                        <div class="col-md-4 mb-2">
                            <label class="form-label" for="LegacyDescription2">@_localizer["Legacy Field Description 2"] </label>
                            <input type="text" asp-for="Input.LegacyDescription2" class="form-control" placeholder="" autocomplete="off" />
                            <span class="invalid-feedback" asp-validation-for="Input.LegacyDescription2">Sorry, you missed this one.</span>
                        </div>
                        <div class="col-md-4 mb-2">
                            <label class="form-label" for="ImportParameterField3">@_localizer["Import Parameter Name 3"] </label>
                            <input type="text" asp-for="Input.ImportParameterField3" class="form-control" placeholder="" readonly="readonly" />
                            <span class="invalid-feedback" asp-validation-for="Input.ImportParameterField3">Sorry, you missed this one.</span>
                        </div>
                        <div class="col-md-4 mb-2">
                            <label class="form-label" for="LegacyField3">@_localizer["Legacy Field 3 Name"]  </label>
                            <input type="text" list="fieldlist" asp-for="Input.LegacyField3" class="form-control" placeholder="" autocomplete="off" />
                            <span class="invalid-feedback" asp-validation-for="Input.LegacyField3">Sorry, you missed this one.</span>
                        </div>
                        <div class="col-md-4 mb-2">
                            <label class="form-label" for="LegacyDescription3">@_localizer["Legacy Field 3 Description"] </label>
                            <input type="text" asp-for="Input.LegacyDescription3" class="form-control" placeholder="" autocomplete="off" />
                            <span class="invalid-feedback" asp-validation-for="Input.LegacyDescription3">Sorry, you missed this one.</span>
                        </div>
                        <div class="col-md-4 mb-2">
                            <label class="form-label" for="ExportParameterField">@_localizer["Export Parameter Name"] </label>
                            <input type="text" asp-for="Input.ExportParameterField" class="form-control" placeholder="" readonly="readonly" />
                            <span class="invalid-feedback" asp-validation-for="Input.ExportParameterField">Sorry, you missed this one.</span>
                        </div>
                        <div class="col-md-4 mb-2">
                            <label class="form-label" for="NewValueField">@_localizer["New Field Name"] <span class="text-danger">*</span></label>
                            <select asp-for="Input.NewValueField" asp-items="Model.DataElements" class="select2bs4" placeholder="Data Element" data-placeholder="Choose Data Element" style="width: 100%;">
                            </select>
                            <span class="invalid-feedback" asp-validation-for="Input.NewValueField">Sorry, you missed this one.</span>
                        </div>
                        <div class="col-md-4 mb-2">
                            <label class="form-label" for="NewFieldName">@_localizer["New Field Description"] </label>
                            <input type="text" asp-for="Input.NewValueFieldDescription" class="form-control" placeholder="" autocomplete="off" />
                            <span class="invalid-feedback" asp-validation-for="Input.NewValueFieldDescription">Sorry, you missed this one.</span>
                        </div>
                        <div class="col-md-4 mb-2">
                            <label class="form-label" for="Active"> </label>
                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" asp-for="Input.Active" class="custom-control-input" value="Active">
                                <label class="custom-control-label" for="Input_Active">@_localizer["Active"]</label>
                            </div>
                        </div>
                        <div class="col-md-4 mb-2">
                            <label class="form-label" for="Team">@_localizer["Team"] </label>

                            <select type="text" asp-for="Input.Team" class="select2bs4" multiple="multiple" asp-dictionaries-for="Team" data-placeholder="Choose Team" data-dropdown-css-class="select2-purple" style="width: 100%;">
                            </select>

                            <span class="invalid-feedback" asp-validation-for="Input.Team">Sorry, you missed this one.</span>
                        </div>
                        <div class="col-md-4 mb-2">
                            <label class="form-label" for="MigrationApproach">@_localizer["Migration Approach"] </label>

                            <select type="text" asp-for="Input.MigrationApproach" class="select2bs4"   asp-dictionaries-for="MigrationApproach" data-placeholder="Choose Migration Approach" data-dropdown-css-class="select2-purple" style="width: 100%;">
                            </select>

                            <span class="invalid-feedback" asp-validation-for="Input.Team">Sorry, you missed this one.</span>
                        </div>
                        <div class="col-md-6 mb-2">
                            <label class="form-label" for="LegacySystem">@_localizer["Legacy System"] </label>

                            <select type="text" asp-for="Input.LegacySystem" class="select2bs4" multiple="multiple" asp-dictionaries-for="LegacySystem" data-placeholder="Choose Legacy System" data-dropdown-css-class="select2-purple" style="width: 100%;">
                            </select>

                            <span class="invalid-feedback" asp-validation-for="Input.LegacySystem">Sorry, you missed this one.</span>
                        </div>
                        <div class="col-md-6 mb-2">
                            <label class="form-label" for="RelevantObjects">@_localizer["Relevant Objects"]  </label>
                            <select asp-for="Input.RelevantObjects" asp-items="Model.MigrationObjects" class="select2bs4" multiple="multiple" placeholder="Relevant Objects" data-placeholder="Choose Relevant Objects" style="width: 100%;">
                            </select>
                            <span class="invalid-feedback" asp-validation-for="Input.RelevantObjects">Sorry, you missed this one.</span>
                        </div>


                        <div class="col-md-12">
                            <label class="form-label" for="Comments">@_localizer["Comments"] </label>
                            <input type="text" asp-for="Input.Comments" class="form-control" placeholder="Comments" autocomplete="off" />
                            <span class="invalid-feedback" asp-validation-for="Input.Comments">Sorry, you missed this one.</span>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">@_localizer["Close"]</button>
                    <button type="submit" name="savebutton" class="btn btn-primary">@_localizer["Save"]</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div id="mappingvalue-modal-right-lg" class="modal fade default-example-modal-right-lg" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-right modal-lg">
        <div class="modal-content">
            <div class="overlay"><i class="fas fa-2x fa-sync-alt fa-spin"></i><div class="pt-2 pl-2 text-gray">Waiting...</div></div>
            <div class="modal-header">
                <h5 class="modal-title h4">Add Value Mapping</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true"><i class="@(Settings.Theme.IconPrefix) fa-times"></i></span>
                </button>
            </div>
            <div class="modal-body">
                <div class="d-flex flex-row">
                    <button type="button" id="refreshdatabutton" class="btn btn-sm btn-outline-primary mr-1">@_localizer["Refresh"] </button>
                    <button type="button" id="adddatabutton" class="btn btn-sm btn-outline-primary mr-1">@_localizer["Add"] </button>
                    <button type="button" id="deletedatabutton" class="btn btn-sm btn-outline-primary mr-1">@_localizer["Delete"] </button>
                    <button type="button" id="canceldatabutton" class="btn btn-sm btn-outline-primary mr-1">@_localizer["Cancel"] </button>
                    <button type="button" id="importdatabutton" class="btn btn-sm btn-outline-primary mr-1">@_localizer["Upload Data"] </button>
                    <button type="button" id="downloaddatabutton" class="btn btn-sm btn-outline-primary mr-1">@_localizer["Download Data"] </button>
                    <input type="file" id="uploaddatafile" accept="text/xml"
                           style="display:none">
                </div>
                <div class="d-flex flex-row mt-2">
                    <div class="flex-fill">
                        
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" id="savedatabutton" class="btn   btn-primary mr-1">@_localizer["Save"] </button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">@_localizer["Close"]</button>

            </div>
        </div>
    </div>
</div>

<datalist id="fieldlist">
    @foreach (var item in Model.FieldList)
    {
        <option value="@item.Name">@item.Description</option>
    }
</datalist>

@await Component.InvokeAsync("ImportExcel", new
{
    importUri = Url.Page("/MappingRules/Index") + "?handler=Import",
    getTemplateUri = @Url.Page("/MappingRules/Index") + "?handler=CreateTemplate",
    onImportedSucceeded = "reloadData()"
})
@section ScriptsBlock {
<partial name="_ValidationScriptsPartial" />

<script type="text/javascript" src="~/lib/easyui/jquery.easyui.min.js" asp-append-version="true"></script>
<script type="text/javascript" src="~/lib/easyui/plugins/datagrid-filter.js" asp-append-version="true"></script>
<script type="text/javascript" src="~/lib/easyui/jquery.easyui.component.js" asp-append-version="true"></script>
<script src="~/lib/jquery-form/jquery.jsonToForm.js"></script>
<script src="~/lib/easyui/plugins/datagrid-detailview.js"></script>
<!-- Select2 -->
<script src="~/plugins/select2/js/select2.full.min.js"></script>

<script>
    var uploaddatainput = document.getElementById("uploaddatafile");
    const rightmodalcontent= document.querySelector("#mappingvalue-modal-right-lg > div > .modal-content");
    const rightoverlay = document.querySelector("#mappingvalue-modal-right-lg > div > .modal-content > .overlay");
    rightoverlay.style.display="none";
    $('#Input_LegacyField1').change(function(){
         const selectedval = $("#Input_LegacyField1").val();
         const option_length = $("#fieldlist").find("option").length;
         for(var i = 0; i < option_length; i++){
           var option_value = $("#fieldlist > option").eq(i).attr('value');
           var option_text = $("#fieldlist > option").eq(i).text();
           if(option_value == selectedval)
           {
               $("#Input_LegacyDescription1").val(option_text)
               break;
           }
         }
    })
    $('#Input_LegacyField2').change(function(){
         const selectedval = $("#Input_LegacyField2").val();
         const option_length = $("#fieldlist").find("option").length;
         for(var i = 0; i < option_length; i++){
           var option_value = $("#fieldlist > option").eq(i).attr('value');
           var option_text = $("#fieldlist > option").eq(i).text();
           if(option_value == selectedval)
           {
               $("#Input_LegacyDescription2").val(option_text)
               break;
           }
         }
    })
    $('#Input_LegacyField3').change(function(){
         const selectedval = $("#Input_LegacyField3").val();
         const option_length = $("#fieldlist").find("option").length;
         for(var i = 0; i < option_length; i++){
           var option_value = $("#fieldlist > option").eq(i).attr('value');
           var option_text = $("#fieldlist > option").eq(i).text();
           if(option_value == selectedval)
           {
               $("#Input_LegacyDescription3").val(option_text)
               break;
           }
         }
    })
    $('#Input_NewValueField').change(function(){
         const selectedval = $("#Input_NewValueField").val();
         const option_length = $("#fieldlist").find("option").length;
         for(var i = 0; i < option_length; i++){
           var option_value = $("#fieldlist > option").eq(i).attr('value');
           var option_text = $("#fieldlist > option").eq(i).text();
           if(option_value == selectedval)
           {
               $("#Input_NewValueFieldDescription").val(option_text)
               break;
           }
         }
    })
     var $fieldmappingvalues_dg ={};
      $('.default-example-modal-right-lg').on('shown.bs.modal', function () {
          $('.default-example-modal-right-lg .flex-fill').html('<table id="fieldmappingvalues_dg"></table>')
      });
    $('.default-example-modal-right-lg').on('shown.bs.modal', function () {
         const suburl='@Url.Page("/MappingRules/Index")?handler=FieldMappingValues&MappingRuleId=' + currentMappingRuleItem.Id;
         $fieldmappingvalues_dg=$('#fieldmappingvalues_dg').datagrid({
                height: 700,
                method: 'GET',
                rownumbers: false,
                singleSelect: true,
                selectOnCheck: false,
                checkOnSelect: false,
                pagination: true,
                clientPaging: false,
                remoteFilter: true,
                sortName: 'Id',
                sortOrder:'desc',
                pageSize: 15,
                filterRules:[],
                pageList: [10, 15, 30, 50, 100, 1000],
                onBeforeLoad: function () {
                    editIndex = undefined;
                    $('#deletebutton').prop('disabled', true);
                },
                onCheckAll: function (rows) {
                    const checked = $(this).datagrid('getChecked').length > 0;
                    $('#deletebutton').prop('disabled', !checked);
                },
                onUncheckAll: function () {
                    $('#deletebutton').prop('disabled', true);
                },
                onCheck: function () {
                    $('#deletebutton').prop('disabled', false);
                },
                onUncheck: function () {
                    const checked = $(this).datagrid('getChecked').length > 0;
                    $('#deletebutton').prop('disabled', !checked);
                },
                onClickCell: function (index, field) {
                    const row=$dg.datagrid('getRows')[index];
                    currentItem = row;
                    if(field!='_action'){
                       onBeginEdit(index, row);
                    }
                },
                onEndEdit: function (index, row) {
                    onEndEdit(index,row)
                },
                onLoadSuccess:function() {
                        const td= $('.flex-fill tr.datagrid-filter-row > td').eq(0);
                       td.html('<i class="ml-2 fal fa-filter"></i>')
                    },
                columns: [getcolumns()]
            }).datagrid('enableFilter', [  ])
              .datagrid('load', suburl);
  
    })

    $('.default-example-modal-right-lg').on('hidden.bs.modal', function () {
        //console.log('hidden.bs.modal')
        const panel = $('#fieldmappingvalues_dg').datagrid('getPanel');
            panel.panel('destroy');
      
    })

    var getcolumns =()=>{
         var columns=[{ field: 'ck', checkbox: true }];
     
         if(currentMappingRuleItem.LegacyField1){
             columns.push({
                        field: 'Legacy1',
                         title: `${currentMappingRuleItem.LegacyField1}(Legacy)<br><small>${currentMappingRuleItem.LegacyDescription1??''}</small>`,
                        sortable: true,
                        width: 220,
                        editor: { type: 'textbox', options: { required: true } }
                    });
         }
         if(currentMappingRuleItem.LegacyField2){
             columns.push({
                        field: 'Legacy2',
                         title: `${currentMappingRuleItem.LegacyField2}(Legacy)<br><small>${currentMappingRuleItem.LegacyDescription2??''}</small>`,
                        sortable: true,
                        width: 220,
                        editor: { type: 'textbox', options: { required: true } }
                    });
         }
         if(currentMappingRuleItem.LegacyField3){
             columns.push({
                        field: 'Legacy3',
                        title: `${currentMappingRuleItem.LegacyField3}(Legacy)<br><small>${currentMappingRuleItem.LegacyDescription3??''}</small>`,
                        sortable: true,
                        width: 220,
                        editor: { type: 'textbox', options: { required: true } }
                    });
         }
         if(currentMappingRuleItem.NewValueField){
             columns.push({
                        field: 'NewValue',
                        title: `${currentMappingRuleItem.NewValueField}(New)<br><small>${currentMappingRuleItem.NewValueFieldDescription??''}</small>`,
                        sortable: true,
                        width: 220,
                        editor: { type: 'textbox', options: { required: true } }
                    });
         }
        columns.push({
                        field: 'CreatedBy',
                        title: '@_localizer["Created By"]',
                        sortable: true,
                        width: 160,
                    }
                    );
       columns.push({
                        field: 'LastModifiedBy',
                        title: '@_localizer["Modified By"]',
                        sortable: true,
                        width: 160,
                    }
                    );
                    return columns;
    }

    uploaddatainput.onchange = () => {
        rightmodalcontent.classList.add("overlay-wrapper");
        rightoverlay.style.display="flex";
        var form = document.querySelector('#mappingrule_form');
        var formData=new FormData(form);
        formData.set("FieldMappingDataFile", uploaddatainput.files[0]);
        formData.set("MappingRuleId", currentMappingRuleId);
        axios({
                url: '@Url.Page("/MappingRules/Index")?handler=UploadFieldMappingData',
                method: 'post',
                data: formData,
                processData: false,// 告诉axios不要去处理发送的数据(重要参数)
                contentType: false,   // 告诉axios不要去设置Content-Type请求头
            }).then((response) => {
                rightmodalcontent.classList.remove("overlay-wrapper");
                rightoverlay.style.display="none";
                if (response.data.Succeeded) {
                   toastr["info"](`@_localizer["Upload successful."]`);
                   reloadData();
                   onReloadFieldData()
               } else {
                   if(response.data.Errors){
                       response.data.Errors.map(err=>{
                           toastr["error"](`${err}`);
                       });
                   }
                }
                uploaddatainput.value = null;
            }).catch(error => {
                rightmodalcontent.classList.remove("overlay-wrapper");
                rightoverlay.style.display="none";
                uploaddatainput.value = null;
                error.response.data.text().then(text=>{
                      const data=JSON.parse(text);
                      const err=data.Errors.toString();
                      bootbox.alert(err);
                  })
            })
    }

    $('#importdatabutton').click(function () {
        const total=$fieldmappingvalues_dg.datagrid('getData').total;
        console.log($fieldmappingvalues_dg.datagrid('getData'))
        if(total>0){
             bootbox.confirm({
                    message: "@_localizer["Warning: The new data will overwrites existing data, Are you sure continue uploading new data?"]",
                    buttons: {
                        confirm: {
                            label: '@_localizer["Yes"]',
                            className: 'btn-success'
                        },
                        cancel: {
                            label: '@_localizer["No"]',
                            className: 'btn-danger'
                        }
                    },
                    callback: function (result) {
                        if (result) {

                            uploaddatainput.click();
                        }
                    }
                 });
        }
        else{
         uploaddatainput.click();
        }
    });
    $('#downloaddatabutton').click(function(){
        rightmodalcontent.classList.add("overlay-wrapper");
        rightoverlay.style.display="flex";
        axios.get('@Url.Page("/MappingRules/Index")?handler=DownloadData&MappingRuleId=' + currentMappingRuleId +'&MappingRuleName=' + currentMappingRuleName ,
            {
                responseType: "blob"
            })
           .then(response => {
                rightmodalcontent.classList.remove("overlay-wrapper");
                rightoverlay.style.display="none";
                    //console.log(getFileName(response.headers['content-disposition']));
                    const filename = getFileName(response.headers['content-disposition']);
                    const url = window.URL.createObjectURL(new Blob([response.data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8' }));
                    const link = document.createElement('a');
                    link.href = url;
                    link.setAttribute('download', filename );
                    document.body.appendChild(link);
                    link.click();
                })
                .catch((error) => {
                     rightmodalcontent.classList.remove("overlay-wrapper");
                     rightoverlay.style.display="none";
                  //console.log(error.response.data.text())
                  error.response.data.text().then(text=>{
                      const data=JSON.parse(text);
                      const err=data.Errors.toString();
                      bootbox.alert(err);
                  })

                })
    });

    $('#finishedbutton').click(function(){
        const url= '@Url.Page("/MappingRules/Index")?handler=Finished';
        var checkedId = $dg.datagrid('getChecked').filter(x=>x.Id>0).map(x => x.Id);
        if (checkedId.length > 0) {
                bootbox.confirm({
                    message: "@_localizer["Are you sure to finish the selected value mapping rules?"]",
                    buttons: {
                        confirm: {
                            label: '@_localizer["Yes"]',
                            className: 'btn-success'
                        },
                        cancel: {
                            label: '@_localizer["No"]',
                            className: 'btn-danger'
                        }
                    },
                    callback: function (result) {
                        if (result) {

                            axios.post(url,{id:checkedId}).then(res => {
                                toastr["info"](`@_localizer["Finished ${checkedId.length} successfully"]`);
                                reloadData();
                            })
                                .catch((error) => {
                                    if (error.response.data.Errors) {
                                        const errors = error.response.data.Errors;
                                        for (let [key, value] of Object.entries(errors)) {
                                            toastr["error"](`${value.toString()}`);
                                        }

                                    } else {
                                        toastr["error"](`${error.response.data}`);
                                    }
                                });
                        }
                    }
                });

            }
    });
    $('#refreshdatabutton').click(function(){
        onReloadFieldData()

    })
    $('#adddatabutton').click(function(){
        onAddDataRow();
    })
    $('#deletedatabutton').click(function(){
        var checkedId = $fieldmappingvalues_dg.datagrid('getChecked').filter(x=>x.Id>0).map(x => x.Id);
        if (checkedId.length > 0) {
                bootbox.confirm({
                    message: "@_localizer["Are you sure to delete the selected value mappings?"]",
                    buttons: {
                        confirm: {
                            label: '@_localizer["Yes"]',
                            className: 'btn-success'
                        },
                        cancel: {
                            label: '@_localizer["No"]',
                            className: 'btn-danger'
                        }
                    },
                    callback: function (result) {
                        if (result) {

                            axios.post('@Url.Page("/MappingRules/Index")?handler=DeleteCheckedFieldValue',{id:checkedId}).then(res => {
                                toastr["info"](`@_localizer["Deleted ${checkedId.length} rows"]`);
                                onReloadFieldData()
                                reloadData();
                            })
                                .catch((error) => {
                                    if (error.response.data.Errors) {
                                        const errors = error.response.data.Errors;
                                        for (let [key, value] of Object.entries(errors)) {
                                            toastr["error"](`${value.toString()}`);
                                        }

                                    } else {
                                        toastr["error"](`${error.response.data}`);
                                    }
                                });
                        }
                    }
                });

            }
    })
    $('#canceldatabutton').click(function(){
         $fieldmappingvalues_dg.datagrid('rejectChanges');
         editIndex = undefined
    });
    $('#savedatabutton').click(function(){
        onSaveChanged();
    })
    $('#downloadmigrationbutton').click(function(){

    })
    var editIndex = undefined;
    var currentItem = {};
    var onReloadFieldData=()=>{
        const suburl='@Url.Page("/MappingRules/Index")?handler=FieldMappingValues&MappingRuleId=' + currentMappingRuleItem.Id;
        $fieldmappingvalues_dg.datagrid('load', suburl);
    }
    var onEndEditing = () => {
            if (editIndex == undefined) {
                return true
            }
            if ($fieldmappingvalues_dg.datagrid('validateRow', editIndex)) {
                $fieldmappingvalues_dg.datagrid('endEdit', editIndex);
                editIndex = undefined;
                return true;
            } else {
                return false;
            }
        }
    var onAddDataRow = () => {
            if (onEndEditing()) {
                var newitem={...currentItem};
                newitem.MappingRuleId = currentMappingRuleId;
                newitem.Id=0;
                newitem.Legacy1='';
                newitem.Legacy2='';
                newitem.Legacy3='';
                newitem.NewValue='';
                newitem.CreatedBy=null;
                newitem.LastModifiedBy=null;
                $fieldmappingvalues_dg.datagrid('insertRow', { index: 0,
                    row:newitem
                    });
                editIndex =0 ;
                $fieldmappingvalues_dg.datagrid('selectRow', editIndex)
                    .datagrid('beginEdit', editIndex);
                $('#savedatabutton').prop('disabled', false);

            }
        }
         var onBeginEdit = (index, field)=> {
            if (editIndex != index) {
                if (onEndEditing()) {
                    $fieldmappingvalues_dg.datagrid('selectRow', index)
                        .datagrid('beginEdit', index);
                    var ed = $dg.datagrid('getEditor', { index: index, field: field });
                    if (ed) {
                        ($(ed.target).data('textbox') ? $(ed.target).textbox('textbox') : $(ed.target)).focus();
                    }
                    editIndex = index;
                } else {
                    setTimeout(function () {
                        $fieldmappingvalues_dg.datagrid('selectRow', editIndex);
                    }, 1);
                }
                $('#savedatabutton').prop('disabled', false);

            }
        }
        var onEndEdit = (index, row)=> {
            currentItem = row;
        }
        var onSaveChanged = () => {
            if (onEndEditing()) {
                if ($fieldmappingvalues_dg.datagrid("getChanges").length) {
                    const inserted = $fieldmappingvalues_dg.datagrid('getChanges', 'inserted').map(item => {
                        item.TrackingState = 1;
                        return item;
                    });
                    const updated = $fieldmappingvalues_dg.datagrid('getChanges', 'updated').map(item => {
                        item.TrackingState = 2
                        return item;
                    });
                    const deleted = $fieldmappingvalues_dg.datagrid('getChanges', 'deleted').map(item => {
                        item.TrackingState = 3
                        return item;
                    });
                    //Deleting duplicate items
                    const changed = inserted.concat(updated.filter(item => {
                        return !deleted.includes(item);
                    })).concat(deleted);
                    axios.post('@Url.Page("/FieldMappingValues/Index")', { Items: changed })
                        .then(response => {
                            toastr["info"]('@_localizer["Save successfully"]');
                            $fieldmappingvalues_dg.datagrid('acceptChanges');
                            onReloadFieldData();
                            reloadData();
                        }).catch(error => {
                            if (error.response.data.Errors) {
                                const errors = error.response.data.Errors;
                                for (let [key, value] of Object.entries(errors)) {
                                    toastr["error"](`${key}: ${value.toString()}`);
                                }

                            } else {
                                toastr["error"](`@_localizer["Save fail"],${error.response.data}`);
                            }

                        });

                }
            }
        }
</script>
<script type="text/javascript">


    $('#refreshbutton').click(function () {
        reloadData();
    });
    $('#addbutton').click(function () {
        popupmodal(null);
    });
    $('#deletebutton').click(function () {
        onDeleteChecked();
    });
    $('#exportbutton').click(function () {
        onExport();
    });
    $('#importbutton').click(function () {
        showImportModal();
    });
    $('#gettemplatebutton').click(function () {
        onGetTemplate();
    });

    $('#downloadtemplatebutton').click(function(){
        onDownloadTemplateFile();
    })

    var vaildatetemplatefile = () => {
        return new  Promise((resolve, reject) => {
            var form = document.querySelector('#mappingrule_form');
            var formData = new FormData(form);
            formData.set("TemplateFile", uploadtemplatefileinput.files[0]);
            axios({
                url: '@Url.Page("/MappingRules/Index")?handler=VaildateTemplateFile',
                method: 'post',
                data: formData,
                processData: false,// 告诉axios不要去处理发送的数据(重要参数)
                contentType: false,   // 告诉axios不要去设置Content-Type请求头
            }).then((response) => {
                if (response.data.Data) {
                    if(response.data.Warnings){
                        toastr["warning"](response.data.Warnings[0]);
                    }
                    resolve(response.data.Data)
                } else {
                    reject(response.data.Errors[0])
                }
            }).catch(error => {
                reject('throw exception')
            })
        });


    }

    $('#mappingrule_form :submit').click(function (e) {
        var form = document.querySelector('#mappingrule_form');
        if ($(form).valid() === false) {
            form.classList.add('was-validated');
        } else {
            event.preventDefault();
            event.stopPropagation();
            var request = $('#mappingrule_form').serialize();
            //console.log(request)
            var formData = new FormData(form);
            formData.set("Input.LegacySystem", $('#Input_LegacySystem').select2('val').toString());
            formData.set("Input.RelevantObjects", $('#Input_RelevantObjects').select2('val').toString());
            formData.set("Input.Team", $('#Input_Team').select2('val').toString());
            formData.set("Input.TemplateFile", $('#Input_TemplateFile').val());
            formData.set("Input.Active", $('#Input_Active').prop('checked')?'Active':'Inactive');
            formData.set("TemplateFile", uploadtemplatefileinput.files[0]);
            axios({
                url: '@Url.Page("/MappingRules/Index")',
                method: 'post',
                data: formData,
                processData: false,// 告诉axios不要去处理发送的数据(重要参数)
                contentType: false,   // 告诉axios不要去设置Content-Type请求头
            }).then((response) => {
                    toastr["info"]('@_localizer["Save successfully"]');
                    $('#mappingrules_modal').modal('toggle');
                    reloadData();
            }).catch(error => {
                console.log(error.response)
                if (error.response.data.Errors) {

                    const errors = error.response.data.Errors;
                    for (let [key, value] of Object.entries(errors)) {
                        toastr["error"](`${value.toString()}`);
                    }

                } else {
                    toastr["error"](`${error.response.data.title}`);
                }
            })

        }
        event.preventDefault();
        event.stopPropagation();
    })
    var uploadtemplatefilename = document.querySelector("#uploadtemplatefilename");
    var uploadtemplatebutton = document.querySelector("button[name='uploadtemplatebutton']");
    var uploadtemplatefileinput = document.getElementById("TemplateFile");
    var savebutton = document.querySelector("button[name='savebutton']");
    uploadtemplatebutton.addEventListener('click', (e) => {
        uploadtemplatefileinput.click();
    })
    uploadtemplatefileinput.onchange = () => {

        vaildatetemplatefile().then(res => {
            //console.log(res)

            $('#Input_TemplateDescription').val(res.TemplateDescription);
            $('#Input_Name').val(res.Name);
            $('#Input_LegacyField1').val(res.LegacyField1);
            $('#Input_LegacyField2').val(res.LegacyField2);
            $('#Input_LegacyField3').val(res.LegacyField3);
            $('#Input_ImportParameterField1').val(res.ImportParameterField1);
            $('#Input_ImportParameterField2').val(res.ImportParameterField2);
            $('#Input_ImportParameterField3').val(res.ImportParameterField3);
            $('#Input_LegacyDescription1').val(res.LegacyDescription1);
            $('#Input_LegacyDescription2').val(res.LegacyDescription2);
            $('#Input_LegacyDescription3').val(res.LegacyDescription3);
            $('#Input_NewValueField').val(res.NewValueField).change();
            $('#Input_ExportParameterField').val(res.ExportParameterField);
            $('#Input_NewValueFieldDescription').val(res.NewValueFieldDescription);
            $('#Input_Comments').val(res.TemplateDescription);

            if(res.LegacyField1){
                $('#Input_LegacyField1').prop("readonly", false)
                $('#Input_LegacyDescription1').prop("readonly", false)
            }else{
                $('#Input_LegacyField1').prop("readonly", true)
                $('#Input_LegacyDescription1').prop("readonly", true)
            }
            if(res.LegacyField2){
                $('#Input_LegacyField2').prop("readonly", false)
                $('#Input_LegacyDescription2').prop("readonly", false)
            }else{
                $('#Input_LegacyField2').prop("readonly", true)
                $('#Input_LegacyDescription2').prop("readonly", true)
            }
            if(res.LegacyField3){
                $('#Input_LegacyField3').prop("readonly", false)
                $('#Input_LegacyDescription3').prop("readonly", false)
            }else{
                $('#Input_LegacyField3').prop("readonly", true)
                $('#Input_LegacyDescription3').prop("readonly", true)
            }
            const uploadfileName = uploadtemplatefileinput.value.split('\\').pop() + `<b>(${res.TemplateDescription})</b>`;
            uploadtemplatefilename.innerHTML = `
             <div class="alert alert-info alert-dismissible fadeup show mb-2 mt-2" role="alert">
                 <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                     <span aria-hidden="true"><i class="@(Settings.Theme.IconPrefix) fa-times"></i></span>
                  </button>
                  <div class="d-flex align-items-center">
                        <div class="alert-icon">
                                <i class="@(Settings.Theme.IconPrefix) fa-file-signature fs-xl mr-2"></i>
                        </div>
                        <div class="flex-1">
                                ${uploadfileName}
                        </div>
                </div>
             </div>`;
            savebutton.disabled = false;
            $('#uploadtemplatefilename .alert').on('closed.bs.alert', (e) => {
               uploadtemplatefileinput.value = null;
               savebutton.disabled = true;
               $('#Input_TemplateDescription').val('');
               $('#Input_Name').val('');
               $('#Input_LegacyField1').val('');
               $('#Input_LegacyField2').val('');
               $('#Input_LegacyField3').val('');
               $('#Input_ImportParameterField1').val('');
               $('#Input_ImportParameterField2').val('');
               $('#Input_ImportParameterField3').val('');
               $('#Input_LegacyDescription1').val('');
               $('#Input_LegacyDescription2').val('');
               $('#Input_LegacyDescription3').val('');
               $('#Input_NewValueField').val(null).change();
               $('#Input_ExportParameterField').val('');
               $('#Input_NewValueFieldDescription').val('');
               $('#Input_Comments').val('');
            })
        }).catch((error) => {
            uploadtemplatefilename.innerHTML = `
              <div class="alert alert-warning alert-dismissible fadeup show mb-2 mt-2" role="alert">
                     <div class="d-flex align-items-center">
                        <div class="alert-icon">
                                <i class="@(Settings.Theme.IconPrefix) fa-exclamation-triangle fs-xl mr-2"></i>
                        </div>
                        <div class="flex-1">
                                ${error}
                        </div>
                </div>
            </div>
            `;
            uploadtemplatefileinput.value = null;
            savebutton.disabled = true;
            toastr["error"](`${error}`);
        });



    };
    var $dg={};
    var initdatagrid = () => {
        $dg = $('#mappingrule_dg').datagrid({
            method: 'GET',
            rownumbers: false,
            singleSelect: true,
            selectOnCheck: false,
            checkOnSelect: false,
            pagination: true,
            clientPaging: false,
            remoteFilter: true,
            sortName: 'Id',
            sortOrder:'desc',
            pageSize: 15,
            pageList: [10, 15, 30, 50, 100, 1000],
            view: detailview,
            detailFormatter:function(index,row){
              const width = window.screen.width-380;
              const container=`<div class="p-3" style="height:620px;width:${width}px;position:relative;"><div class="card card-primary card-outline direct-chat direct-chat-primary">
              <div class="card-header">
                <h3 class="card-title">${row.Name}</h3>
                <div class="card-tools">
                    <a href="javascript:onDownload(${index})" class="ml-2 btn btn-sm  btn-outline-primary">
                     <span class="@(Settings.Theme.IconPrefix) fa-download mr-1"></span>
                     Download Value Mapping
                   </a>
                </div>
              </div>
              <div class="card-body">
                <table id="mappingvalues_dg_${row.Id}"></table>
              </div>
              </div></div>`
                    return container;
                },
            onCollapseRow:function(index,row){
                const panel = $(`#mappingvalues_dg_${row.Id}`).datagrid('getPanel');
                panel.panel('destroy');
                $(this).datagrid('getRowDetail',index).find(`.card-body`).html(`<table id="mappingvalues_dg_${row.Id}"></table>`);
            },
            onExpandRow: function(index,row){
                const columns = getgridcolumns(row);
               // var subgrid = $(this).datagrid('getRowDetail',index).find(`#mappingvalues_dg_${row.Id}`);
                const suburl='@Url.Page("/MappingRules/Index")?handler=FieldMappingValues&MappingRuleId=' + row.Id;
                $(`#mappingvalues_dg_${row.Id}`).datagrid({
                     width:window.screen.width-400,
                     height: 510,
                     method: 'GET',
                     singleSelect: true,
                     rownumbers: false,
                     pagination: true,
                     clientPaging: false,
                     remoteFilter: true,
                     sortName: 'Id',
                     sortOrder:'asc',
                     pageSize: 10,
                     pageList: [10, 30, 50, 100, 1000],
                     columns: [columns],
                    }).datagrid('enableFilter', [{}])
                      .datagrid('load',suburl);

            },
            onBeforeLoad: function () {
                $('#deletebutton').prop('disabled', true);
            },
            onCheckAll: function (rows) {
                const checked = $(this).datagrid('getChecked').length > 0;
                $('#deletebutton').prop('disabled', !checked);
            },
            onUncheckAll: function () {
                $('#deletebutton').prop('disabled', true);
            },
            onCheck: function () {
                $('#deletebutton').prop('disabled', false);
            },
            onUncheck: function () {
                const checked = $(this).datagrid('getChecked').length > 0;
                $('#deletebutton').prop('disabled', !checked);
            },
            onLoadSuccess:function(){
               const td= $('.card-body tr.datagrid-filter-row > td').eq(1);
               td.html('<i class="ml-2 fal fa-filter"></i>')
            },
            columns: [[
                { field: 'ck', checkbox: true },
                {
                    field: '_action',
                    title: '@_localizer["Command"]',
                    width: 100,
                    align: 'center',
                    formatter: function (value, row, index) {
                        if(row.Active=="Active"){
                          return `<div class="btn-group" role="group">
                                  <a id="commandbtngroup" type="button"  class="btn btn-outline-primary btn-sm dropdown-toggle waves-effect waves-themed" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    <i class="@(Settings.Theme.IconPrefix) fa-edit"></i>
                                 </a>
                                 <div class="dropdown-menu dropdown-menu-animated" aria-labelledby="commandbtngroup">
                                   <button class="dropdown-item" onclick="onEdit(${index})" > @_localizer["Edit Value Mapping Rule"]</button>
                                   <button class="dropdown-item" onclick="onShowMappingValues(${index})" > @_localizer["Add Value Mapping"]</button>
                                   <button class="dropdown-item" onclick="onDownload(${index})" > @_localizer["Download Value Mapping"]</button>
                                 </div>
                              </div>`;
                        }
                        else {
                           return `<div class="btn-group" role="group">
                                  <a id="commandbtngroup" type="button"  class="btn btn-outline-primary btn-sm dropdown-toggle waves-effect waves-themed" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    <i class="@(Settings.Theme.IconPrefix) fa-edit"></i>
                                 </a>
                                 <div class="dropdown-menu dropdown-menu-animated" aria-labelledby="commandbtngroup">
                                   <button class="dropdown-item" onclick="onEdit(${index})" > @_localizer["Edit Value Mapping Rule"]</button>
                                   <button class="dropdown-item" onclick="onShowMappingValues(${index})" > @_localizer["Add Value Mapping"]</button>
                                 </div>
                              </div>`;
                        }
                    }
                },
                { field: 'Active',
                  title: '@_localizer["Active"]',
                  sortable: true,
                  width: 100
                },
                { field: 'Status',
                    title: '@_localizer["Status"]',
                    sortable: true,
                    width: 120,
                    formatter:function(value){
                        if(value=='Not started') {
                            return `<span class="right badge badge-secondary">${value}</span>`
                        }else if(value=='Ongoing') {
                            return `<span class="right badge badge-info">${value}</span>`
                        }else{
                            return `<span class="right badge badge-success">${value}</span>`
                        }

                    }
                },
                { field: 'Team', title: '@_localizer["Team"]', sortable: true, width: 160 },
                { field: 'LegacySystem', title: '@_localizer["Legacy System"]', sortable: true, width: 140 },
                { field: 'Name',
                  title: '@_localizer["Mapping Rule Name"]',
                  sortable: true,
                  formatter:function(value,row,index){
                      return `<a> ${value??''} </a> <br> <small>${row.Comments??''}</small> `;
                  },
                  width: 280
                },
                { field: 'NewValueField',
                  title: '@_localizer["New Value Field"]',
                  sortable: true,
                  width: 220,
                  formatter:function(value,row,index){
                      return `<a> ${value??''} </a> <br> <small>${row.NewValueFieldDescription??''}</small>`;
                  }
                },
                { field: 'LegacyField1',
                  title: '@_localizer["Legacy Field 1 Name"]',
                  sortable: true,
                  width: 220,
                  formatter:function(value,row,index){
                      return `<a> ${value??''} </a> <br> <small>${row.LegacyDescription1??''}</small>`;
                  }
                },
                { field: 'LegacyField2',
                  title: '@_localizer["Legacy Field 2 Name"]',
                  sortable: true,
                  width: 220,
                  formatter:function(value,row,index){
                      return `<a> ${value??''} </a> <br> <small>${row.LegacyDescription2??''}</small>`;
                  }
                },
                { field: 'LegacyField3',
                  title: '@_localizer["Legacy Field 3 Name"]',
                  sortable: true,
                  width: 220,
                  formatter:function(value,row,index){
                      return `<a> ${value??''} </a> <br> <small>${row.LegacyDescription3??''}</small>`;
                  }
                },
                { field: 'MigrationApproach', title: '@_localizer["Migration Approach"]', sortable: true, width: 180 },
                { field: 'RelevantObjects',
                  title: '@_localizer["Relevant Objects"]',
                  sortable: true,
                  width: 240,
                  formatter:function(value) {
                      if(value){
                        const word = value.split(',');
                        if(word.length>1){
                            let label ='';
                            word.map(item => label =  label + "<small>" + item + "</small>" + "<br>" );
                            return label;
                        }else{
                          return value;
                        }
                      }
                  }
                },
                { field: 'CreatedBy', title: '@_localizer["Created By"]', sortable: true, width: 160 },
                { field: 'LastModifiedBy', title: '@_localizer["Last Modified By"]',  sortable: true, width: 160 },

            ]]
        })
            .datagrid('enableFilter', [{
                field:'Active',
                type:'combobox',
                options:{
                    valueField:'id',
                    textField:'text',
                    panelHeight:'auto',
                    data:[
                        {id:'',text:'ALL'},
                        {id:'Active',text:'Active'},
                        {id:'Inactive',text:'Inactive'}
                     ],
                    onChange: function (item) {
                         if(item){
                             $dg.datagrid('addFilterRule', {
                               field: 'Active',
                               op: 'equal',
                               value: item
                             });
                             $dg.datagrid('doFilter');
                         }else{
                             $dg.datagrid('removeFilterRule', 'Active'	                          );
                             $dg.datagrid('doFilter');
                         }
                        }
                }
            },
            {
                field:'Status',
                type:'combobox',
                options:{
                    valueField:'id',
                    textField:'text',
                    panelHeight:'auto',
                    data:[
                        {id:'',text:'ALL'},
                        {id:'Not started',text:'Not started'},
                        {id:'Ongoing',text:'Ongoing'},
                        {id:'Finished',text:'Finished'},
                     ],
                    onChange: function (item) {
                         if(item){
                             $dg.datagrid('addFilterRule', {
                               field: 'Status',
                               op: 'equal',
                               value: item
                             });
                             $dg.datagrid('doFilter');
                         }else{
                             $dg.datagrid('removeFilterRule', 'Status'	                          );
                             $dg.datagrid('doFilter');
                         }
                        }
                }
            }])
            .datagrid('load', '@Url.Page("/MappingRules/Index")?handler=Data');

    }
    var getgridcolumns = (row) =>{
         let columns=[];
         if(row.LegacyField1) {
             columns.push({
                        field: 'Legacy1',
                         title: `${row.LegacyField1}(Legacy)<br><small>${row.LegacyDescription1??''}</small>`,
                        sortable: true,
                        width: 220,
                        editor: { type: 'textbox', options: { required: true } }
                    });
         }
         if(row.LegacyField2) {
             columns.push({
                        field: 'Legacy2',
                         title: `${row.LegacyField2}(Legacy)<br><small>${row.LegacyDescription2??''}</small>`,
                        sortable: true,
                        width: 220,
                        editor: { type: 'textbox', options: { required: true } }
                    });
         }
         if(row.LegacyField3) {
             columns.push({
                        field: 'Legacy3',
                        title: `${row.LegacyField3}(Legacy)<br><small>${row.LegacyDescription3??''}</small>`,
                        sortable: true,
                        width: 220,
                        editor: { type: 'textbox', options: { required: true } }
                    });
         }
         if(row.NewValueField) {
             columns.push({
                        field: 'NewValue',
                        title: `${row.NewValueField}(New)<br><small>${row.NewValueFieldDescription??''}</small>`,
                        sortable: true,
                        width: 220,
                        editor: { type: 'textbox', options: { required: true } }
                    });
         }
        columns.push({
                        field: 'CreatedBy',
                        title: '@_localizer["Created By"]',
                        sortable: true,
                        width: 160,
                    }
                    );
       columns.push({
                        field: 'LastModifiedBy',
                        title: '@_localizer["Modified By"]',
                        sortable: true,
                        width: 160,
                    }
                    );
       return columns;
    }
    var reloadData = () => {
        $dg.datagrid('reload');
    }

    $(() => {
        //Initialize Select2 Elements
        $('.select2bs4').select2({
            theme: 'bootstrap4',
            dropdownParent: $('#mappingrules_modal')
        })
        //$('.select2').select2({
        //    dropdownParent: $('#mappingrules_modal')
        //})
        initdatagrid();
    })
    var popupmodal = (document) => {
        $('#mappingrules_modal').modal('toggle');
        $('#mappingrules_modal .modal-title').html('@_localizer["New Value Mapping Rule"]');
        $('#mappingrule_form').clearForm();
        $('#mappingrule_form')[0].reset();
        if (document) {
            uploadtemplatebutton.disabled = false;
            uploadtemplatefileinput.required = false;
            $('#mappingrules_modal .modal-title').html('@_localizer["Edit Value Mapping Rule"]');

            $('#mappingrule_form').jsonToForm(document, {
                IsMock: function (value) {
                    if (value == true) {
                        $('#Input_IsMock').prop('checked', true);
                    } else {
                        $('#Input_IsMock').prop('checked', false);
                    }
                },
                Active:function(value){
                     if (value == 'Active') {
                        $('#Input_Active').prop('checked', true);
                    } else {
                        $('#Input_Active').prop('checked', false);
                    }
                },
                TemplateDescription:function(value){
                     $('#Input_TemplateDescription').val(value)
                },
                TemplateFile: function (value) {
                    const description= $('#Input_TemplateDescription').val();
                    $('#Input_TemplateFile').val(value)
                    if (value && value.length > 0) {
                        uploadtemplatefilename.innerHTML = `
                        <div class="alert alert-info alert-dismissible fadeup show mb-2 mt-2" role="alert">
                          <div class="d-flex align-items-center">
                            <div class="alert-icon">
                                <i class="@(Settings.Theme.IconPrefix) fa-upload fs-xl mr-2"></i>
                            </div>
                            <div class="flex-1">
                                ${value}<b>(${description})</b>
                            </div>
                          </div>
                        </div>
                        `
                    } else {
                        savebutton.disabled = true;
                        uploadtemplatefilename.innerHTML = ` <div class="alert alert-danger mt-2 mb-2" role="alert">
                                    <i class="fal fa-exclamation-triangle mr-2"></i>   @_localizer["Please upload a value mapping template file."].
                                </div>`;
                    }
                },
                LegacySystem: function (value) {
                    if (value) {
                        $('#Input_LegacySystem').val(value.split(',')).change();
                    } else {
                        $('#Input_LegacySystem').val(null).change();
                    }
                },
                RelevantObjects: function (value) {
                    if (value) {
                        $('#Input_RelevantObjects').val(value.split(',')).change();
                    } else {
                        $('#Input_RelevantObjects').val(null).change();
                    }
                },
                Team: function (value) {
                    if (value) {
                        $('#Input_Team').val(value.split(',')).change();
                    } else {
                        $('#Input_Team').val(null).change();
                    }
                },
                NewValueField: function (value) {
                    if (value) {
                        $('#Input_NewValueField').val(value).change();
                    } else {
                        $('#Input_NewValueField').val(null).change();
                    }
                },
                LegacyField1:function(value){
                     $('#Input_LegacyField1').val(value);
                     if(value){
                       $('#Input_LegacyField1').prop("readonly", false)
                       $('#Input_LegacyDescription1').prop("readonly", false)
                     }else{
                       $('#Input_LegacyField1').prop("readonly", true)
                       $('#Input_LegacyDescription1').prop("readonly", true)
                     }
                },
                LegacyField2:function(value){
                    $('#Input_LegacyField2').val(value);
                    if(value){
                      $('#Input_LegacyField2').prop("readonly", false)
                      $('#Input_LegacyDescription2').prop("readonly", false)
                    }else{
                      $('#Input_LegacyField2').prop("readonly", true)
                      $('#Input_LegacyDescription2').prop("readonly", true)
                    }
                },
                LegacyField3:function(value){
                    $('#Input_LegacyField3').val(value);
                    if(value){
                       $('#Input_LegacyField3').prop("readonly", false)
                       $('#Input_LegacyDescription3').prop("readonly", false)
                    }else{
                       $('#Input_LegacyField3').prop("readonly", true)
                       $('#Input_LegacyDescription3').prop("readonly", true)
                    }
                }




            })
        } else {
            savebutton.disabled = true;
            uploadtemplatebutton.disabled = false;
            uploadtemplatefileinput.required = true;
            $('#mappingrule_form #Input_Id').val(0);
            $('#mappingrule_form #Input_TemplateFile').val('');
            $('#mappingrule_form #Input_Status').val('Not started');
            $('#Input_NewValueField').val(null).change();
            $('#Input_RelevantObjects').val(null).change();
            $('#Input_LegacySystem').val(null).change();
            $('#Input_Team').val(null).change();
            $('#Input_Active').prop('checked', false);
            uploadtemplatefilename.innerHTML =`<div class="alert alert-danger mt-2 mb-2" role="alert">
                                    <i class="fal fa-exclamation-triangle mr-2"></i>   @_localizer["Please upload a value mapping template file."].
                         </div>`
        }
    }

    var onEdit = (index) => {
        var document = $dg.datagrid('getRows')[index];
        popupmodal(document);
    }
    var onDelete = (id) => {
        bootbox.confirm({
            message: "@_localizer["Are you sure to delete a value mapping rule?"]",
            buttons: {
                confirm: {
                    label: '@_localizer["Yes"]',
                    className: 'btn-success'
                },
                cancel: {
                    label: '@_localizer["No"]',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {
                    axios.get('@Url.Page("/MappingRules/Index")?handler=Delete&id=' + id).then(res => {
                        toastr["info"]('@_localizer["Deleted successfully"]');
                        reloadData();
                    })
                        .catch((error) => {
                            if (error.response.data.Errors) {
                                const errors = error.response.data.Errors;
                                for (let [key, value] of Object.entries(errors)) {
                                    toastr["error"](`${value.toString()}`);
                                }

                            } else {
                                toastr["error"](`${error.response.data}`);
                            }
                        });
                }
            }
        })
    }
    var onDeleteChecked = () => {
        var checkedId = $dg.datagrid('getChecked').map(x => x.Id);
        if (checkedId.length > 0) {
            bootbox.confirm({
                message: "@_localizer["Are you sure to delete the selected value mapping rules?"]",
                buttons: {
                    confirm: {
                        label: '@_localizer["Yes"]',
                        className: 'btn-success'
                    },
                    cancel: {
                        label: '@_localizer["No"]',
                        className: 'btn-danger'
                    }
                },
                callback: function (result) {
                    if (result) {
                        var paras = new URLSearchParams(checkedId.map(s => ['id', s]));
                        console.log(paras.toString())
                        axios.get('@Url.Page("/MappingRules/Index")?handler=DeleteChecked&' + paras.toString()).then(res => {
                            toastr["info"](`@_localizer["Deleted ${checkedId.length} rows"]`);
                            reloadData();
                        })
                            .catch((error) => {
                                if (error.response.data.Errors) {
                                    const errors = error.response.data.Errors;
                                    for (let [key, value] of Object.entries(errors)) {
                                        toastr["error"](`${value.toString()}`);
                                    }

                                } else {
                                    toastr["error"](`${error.response.data}`);
                                }
                            });
                    }
                }
            });

        }
    }
    var onExport = () => {
        var options = $dg.datagrid('options');
        var data = {
            filterRules: JSON.stringify(options.filterRules),
            sort: options.sortName,
            order: options.sortOrder,
        }
        axios.post('@Url.Page("/MappingRules/Index")?handler=Export',
            data,
            {
                responseType: "blob"
            })
            .then(response => {
                const filename = getFileName(response.headers['content-disposition']);
                const url = window.URL.createObjectURL(new Blob([response.data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8' }));
                const link = document.createElement('a');
                link.href = url;
                link.setAttribute('download', filename);
                document.body.appendChild(link);
                link.click();
                toastr["info"](`@_localizer["Export successfully"]`);
            }).catch(error => {
                if (error.response.data.Errors) {
                    const errors = error.response.data.Errors;
                    for (let [key, value] of Object.entries(errors)) {
                        toastr["error"](`${value.toString()}`);
                    }

                } else {
                    toastr["error"](`${error.response.data}`);
                }
            })


    }
    var onDownload = (index) => {
       const item = $dg.datagrid('getRows')[index];
       currentMappingRuleItem = item;
       currentMappingRuleId = item.Id;
       currentMappingRuleName = item.Name;
       axios.get('@Url.Page("/MappingRules/Index")?handler=DownloadData&MappingRuleId=' + currentMappingRuleId +'&MappingRuleName=' + currentMappingRuleName ,
            {
                responseType: "blob"
            })
           .then(response => {
                    const filename = getFileName(response.headers['content-disposition']);
                    const url = window.URL.createObjectURL(new Blob([response.data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8' }));
                    const link = document.createElement('a');
                    link.href = url;
                    link.setAttribute('download', filename );
                    document.body.appendChild(link);
                    link.click();
                })
                .catch((error) => {
                  error.response.data.text().then(text=>{
                      const data=JSON.parse(text);
                      const err=data.Errors.toString();
                      bootbox.alert(err);
                  })

                })
    }
    var currentMappingRuleId=0;
    var currentMappingRuleName='';
    var currentMappingRuleItem={};
    var onShowMappingValues = (index) => {
        const item = $dg.datagrid('getRows')[index];
        currentMappingRuleItem = item;
        currentMappingRuleId = item.Id;
        currentMappingRuleName = item.Name;
        $('.default-example-modal-right-lg').modal('toggle')
    }

    var onDownloadTemplateFile = ()=> {
        const items = $dg.datagrid('getChecked');
        if(items.length==0){
             bootbox.alert({
               message: "@_localizer["Please select the records to download."]"
             });
        }
        items.map(item=>{
            if(item.Active=='Active') {
              axios.get('@Url.Page("/MappingRules/Index")?handler=DownloadData&MappingRuleId=' + item.Id +'&MappingRuleName=' + item.Name ,
              {
                 responseType: "blob"
              })
              .then(response => {
                    const filename = getFileName(response.headers['content-disposition']);
                    const url = window.URL.createObjectURL(new Blob([response.data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8' }));
                    const link = document.createElement('a');
                    link.href = url;
                    link.setAttribute('download', filename );
                    document.body.appendChild(link);
                    link.click();
                })
                .catch((error) => {
                  error.response.data.text().then(text=>{
                      const data=JSON.parse(text);
                      const err=data.Errors.toString();
                      bootbox.alert(err);
                  })

                })
             } else {
                  toastr["warning"](`${item.Name} is Inactive.`);
             }
        });
    }

</script>
}
