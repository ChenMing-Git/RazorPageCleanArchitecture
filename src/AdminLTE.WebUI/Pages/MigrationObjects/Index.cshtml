@page
@using CleanArchitecture.Razor.Application.Constants.Permission
@model AdminLTE.WebUI.Pages.MigrationObjects.IndexModel
@inject Microsoft.Extensions.Localization.IStringLocalizer<IndexModel> _localizer
@inject Microsoft.AspNetCore.Authorization.IAuthorizationService _authorizationService
@{
    ViewData["Title"] = _localizer["Migration Objects"].Value;
    ViewData["PageName"] = "migrationobjects_index";
    ViewData["Category1"] = _localizer["Value Mapping Cockpit"].Value;
    ViewData["Heading"] = _localizer["Migration Objects"].Value;
    ViewData["PageDescription"] = _localizer["See all available options"].Value;
    ViewData["PreemptiveClass"] = "Default";
    //var _canCreate = await _authorizationService.AuthorizeAsync(User, null, Permissions.Dictionaries.Create);
    //var _canEdit = await _authorizationService.AuthorizeAsync(User, null, Permissions.Dictionaries.Edit);
    //var _canDelete = await _authorizationService.AuthorizeAsync(User, null, Permissions.Dictionaries.Delete);
    //var _canSearch = await _authorizationService.AuthorizeAsync(User, null, Permissions.Dictionaries.Search);
    //var _canImport = await _authorizationService.AuthorizeAsync(User, null, Permissions.Dictionaries.Import);
    //var _canExport = await _authorizationService.AuthorizeAsync(User, null, Permissions.Dictionaries.Export);
}
@section HeadBlock {

    
    <link rel="stylesheet" media="screen, print" href="~/css/fa-solid.css">
    <link rel="stylesheet" media="screen,print" href="~/lib/easyui/themes/insdep/easyui.css">
    <style>

        .migrationobjects_dg_datagrid-cell-c1-_action {
            overflow: visible !important
        }
    </style>
}
<div id="js-page-content-demopanels" class="card mb-g">
    <div class="card-header bg-white d-flex align-items-center">
        <h4 class="m-0">
            @_localizer["Migration Objects"]
           <small>&nbsp;</small>
        </h4>
        <div class="ml-auto">
            
                <button class="btn btn-sm btn-outline-primary " id="addbutton">
                    <span class="@(Settings.Theme.IconPrefix) fa-plus mr-1"></span>
                    @_localizer["Add"]
                </button>
           
                <button class="btn btn-sm btn-outline-danger" disabled id="deletebutton">
                    <span class="@(Settings.Theme.IconPrefix) fa-trash-alt mr-1"></span>
                    @_localizer["Delete"]
                </button>
          
                <button class="btn btn-sm btn-outline-secondary" disabled id="cancelbutton">
                    <span class="@(Settings.Theme.IconPrefix) fa-stop mr-1"></span>
                    @_localizer["Cancel"]
                </button>
                <button class="btn btn-sm btn-outline-primary" disabled id="savebutton">
                    <span class="@(Settings.Theme.IconPrefix) fa-save mr-1"></span>
                    @_localizer["Save"]
                </button>
            
          
                <div class="btn-group" role="group">
                    <button id="importbutton" type="button" class="btn btn-sm  btn-outline-primary waves-effect waves-themed">
                        <span class="@(Settings.Theme.IconPrefix) fa-upload mr-1"></span>   @_localizer["Import Data"]
                    </button>
                    <button type="button" class="btn btn-sm btn-outline-primary dropdown-toggle dropdown-toggle-split waves-effect waves-themed" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <span class="sr-only">Toggle Dropdown</span>
                    </button>
                    <div class="dropdown-menu" aria-labelledby="importbutton">
                        <button id="gettemplatebutton" class="dropdown-item">@_localizer["Download Template"]</button>
                    </div>
                </div>
           <button class="btn btn-sm btn-outline-primary " id="exportbutton">
					<span class="@(Settings.Theme.IconPrefix) fa-download mr-1"></span>
					@_localizer["Export Data"]
				</button>
        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-12">
                @Html.AntiForgeryToken()
                <table id="migrationobjects_dg">
                </table>
            </div>
        </div>
    </div>
</div>

@await Component.InvokeAsync("ImportExcel", new
{
    importUri = Url.Page("/MigrationObjects/Index") + "?handler=Import",
    getTemplateUri = @Url.Page("/MigrationObjects/Index") + "?handler=CreateTemplate",
    onImportedSucceeded = "reloadData()"
})
@section ScriptsBlock {
    <script type="text/javascript" src="~/lib/easyui/jquery.easyui.min.js" asp-append-version="true"></script>
    <script type="text/javascript" src="~/lib/easyui/jquery.easyui.component.js" asp-append-version="true"></script>
    <script type="text/javascript" src="~/lib/easyui/plugins/datagrid-filter.js" asp-append-version="true"></script>
    <script src="~/lib/jquery-form/jquery.jsonToForm.js"></script>

    <script type="text/javascript">
        $('#searchbutton').click(function () {
            reloadData();
        });
        $('#addbutton').click(function () {
            onAddRow(null);
        });
        $('#deletebutton').click(function () {
            onDeleteChecked();
        });
        $('#cancelbutton').click(function () {
            onReject();
        });
        $('#savebutton').click(function () {
            onSaveChanged();
        });
        $('#exportbutton').click(function () {
            onExport();
        });
        $('#importbutton').click(function () {
            showImportModal();
        });
        $('#gettemplatebutton').click(function () {
            onGetTemplate();
        });
        var $dg={};
        var initdatagrid = () => {
            $dg = $('#migrationobjects_dg').datagrid({
                height: 700,
                method: 'GET',
                rownumbers: false,
                singleSelect: true,
                selectOnCheck: false,
                checkOnSelect: false,
                pagination: true,
                clientPaging: false,
                remoteFilter: true,
                sortName: 'Id',
                sortOrder:'desc',
                pageSize: 15,
                pageList: [10, 15, 30, 50, 100, 1000],
                onBeforeLoad: function () {
                    editIndex = undefined;
                    $('#deletebutton').prop('disabled', true);
                },
                onCheckAll: function (rows) {
                    const checked = $(this).datagrid('getChecked').length > 0;
                    $('#deletebutton').prop('disabled', !checked);
                },
                onUncheckAll: function () {
                    $('#deletebutton').prop('disabled', true);
                },
                onCheck: function () {
                    $('#deletebutton').prop('disabled', false);
                },
                onUncheck: function () {
                    const checked = $(this).datagrid('getChecked').length > 0;
                    $('#deletebutton').prop('disabled', !checked);
                },
                onClickRow: function (index, row) {
                    console.log('onClickRow')
                    currentItem = row;
                    onBeginEdit(index, row);
                },
                onEndEdit: function (index, row) {
                    onEndEdit(index,row)
                },
                onBeginEdit: function (index, row) {
                    const projectid = row.MigrationProjectId;
                    const projectfield = $(this).datagrid('getEditor', { index: index, field: 'MigrationProjectId' });
                    $(projectfield.target).combobox({
                        required: true,
                        value: projectid,
                        url:'@Url.Page("/MigrationObjects/Index")?handler=MigrationProjects',
                        method:'GET',
                        valueField:'Id',
                        textField:'Name',
                        panelHeight:'auto',
                        mode:'remote',
                        onSelect: function (item) {
                        }
                    });
                     
                },
                columns: [[
                    { field: 'ck', checkbox: true },
                    {
                        field: 'MigrationProjectId',
                        title: '@_localizer["Project Name"]',
                        sortable: true,
                        width: 180,
                        formatter:function(v,r,i){return r.ProjectName},
                        editor: { type: 'combobox',
                           options: {
                               required: true
                           }
                        }
                    },
                    {
                        field: 'Name',
                        title: '@_localizer["Conversion Object Name"]',
                        sortable: true,
                        width: 230,
                        editor: { type: 'textbox', options: { required: true} }
                    },
                    {
                        field: 'ObjectName',
                        title: '@_localizer["Object Name"]',
                        sortable: true,
                        width: 180,
                        editor: { type: 'textbox', options: { required: true} }
                    },
                    
                    {
                        field: 'Description',
                        title: '@_localizer["Description"]',
                        sortable: true,
                        width: 280,
                        editor: { type: 'textbox', options: { required: false } }
                    },
                    {
                        field: 'CreatedBy',
                        title: '@_localizer["Created By"]',
                        sortable: true,
                        width: 150,
                    },
                    {
                        field: 'LastModifiedBy',
                        title: '@_localizer["Last Modified By"]',
                        sortable: true,
                        width: 150,
                    }
                ]]
            })
                .datagrid('enableFilter', [
                    {
                    field:'MigrationProjectId',
                    type:'combobox',
                    options:{
                        value: '',
                        url:'@Url.Page("/MigrationObjects/Index")?handler=MigrationProjects',
                        method:'GET',
                        valueField:'Id',
                        textField:'Name',
                        panelHeight:'auto',
                        mode:'remote',
                        onChange: function (item) {
                         if(item){
                             $dg.datagrid('addFilterRule', {
	                           field: 'MigrationProjectId',
	                           op: 'equal',
	                           value: item
                             });
                             $dg.datagrid('doFilter');
                         }else{
                             $dg.datagrid('removeFilterRule', 'MigrationProjectId'	                          );
                             $dg.datagrid('doFilter');
                         }
                        }

                    }
                },
                ])
                .datagrid('load', '@Url.Page("/MigrationObjects/Index")?handler=Data');

        }

        var reloadData = () => {
            $dg.datagrid('reload');
        }

        $(() => {
            initdatagrid();
        })
        var editIndex = undefined;
        var currentItem = {};
        var onEndEditing = () => {
            if (editIndex == undefined) {
                return true
            }
            if ($dg.datagrid('validateRow', editIndex)) {
                $dg.datagrid('endEdit', editIndex);
                editIndex = undefined;
                return true;
            } else {
                return false;
            }
        }
        var onAddRow = () => {
            if (onEndEditing()) {
                $dg.datagrid('insertRow', { index: 0,
                    row:{ Name: '', Description: '' }
                    });
                editIndex =0 ;
                $dg.datagrid('selectRow', editIndex)
                    .datagrid('beginEdit', editIndex);
                $('#savebutton').prop('disabled', false);
                $('#cancelbutton').prop('disabled', false);
            }
        }
        var onBeginEdit = (index, field)=> {
            if (editIndex != index) {
                if (onEndEditing()) {
                    $dg.datagrid('selectRow', index)
                        .datagrid('beginEdit', index);
                    var ed = $dg.datagrid('getEditor', { index: index, field: field });
                    if (ed) {
                        ($(ed.target).data('textbox') ? $(ed.target).textbox('textbox') : $(ed.target)).focus();
                    }
                    editIndex = index;
                } else {
                    setTimeout(function () {
                        $dg.datagrid('selectRow', editIndex);
                    }, 1);
                }
                $('#savebutton').prop('disabled', false);
                $('#cancelbutton').prop('disabled', false);
            }
        }
        var onEndEdit = (index, row)=> {
            var ed = $dg.datagrid('getEditor', {
                index: index,
                field: 'Name'
            });
            row.Name = $(ed.target).textbox('getValue');
            currentItem = row;
        }

        var onReject = () => {
            $dg.datagrid('rejectChanges');
            editIndex = undefined;
            $('#savebutton').prop('disabled', true);
            $('#cancelbutton').prop('disabled', true);
        }
        var onSaveChanged = () => {
            if (onEndEditing()) {
                if ($dg.datagrid("getChanges").length) {
                    const inserted = $dg.datagrid('getChanges', 'inserted').map(item => {
                        item.TrackingState = 1;
                        return item;
                    });
                    const updated = $dg.datagrid('getChanges', 'updated').map(item => {
                        item.TrackingState = 2
                        return item;
                    });
                    const deleted = $dg.datagrid('getChanges', 'deleted').map(item => {
                        item.TrackingState = 3
                        return item;
                    });
                    //Deleting duplicate items
                    const changed = inserted.concat(updated.filter(item => {
                        return !deleted.includes(item);
                    })).concat(deleted);
                    axios.post('@Url.Page("/MigrationObjects/Index")', { Items: changed })
                        .then(response => {
                            toastr["info"]('@_localizer["Save successfully"]');
                            $dg.datagrid('acceptChanges');
                            reloadData();
                        }).catch(error => {
                            if (error.response.data.Errors) {
                                const errors = error.response.data.Errors;
                                for (let [key, value] of Object.entries(errors)) {
                                    toastr["error"](`${key}: ${value.toString()}`);
                                }

                            } else {
                                toastr["error"](`@_localizer["Save fail"],${error.response.data}`);
                            }

                        });

                }
            }
        }


        var onDeleteChecked = () => {
            var checkedId = $dg.datagrid('getChecked').map(x => x.Id);
            if (checkedId.length > 0) {
                bootbox.confirm({
                    message: "@_localizer["Are you sure delete checked rows?"]",
                    buttons: {
                        confirm: {
                            label: '@_localizer["Yes"]',
                            className: 'btn-success'
                        },
                        cancel: {
                            label: '@_localizer["No"]',
                            className: 'btn-danger'
                        }
                    },
                    callback: function (result) {
                        if (result) {
                            var paras = new URLSearchParams(checkedId.map(s => ['id', s]));
                            console.log(paras.toString())
                            axios.get('@Url.Page("/MigrationObjects/Index")?handler=DeleteChecked&' + paras.toString()).then(res => {
                                toastr["info"](`@_localizer["Deleted ${checkedId.length} successfully"]`);
                                reloadData();
                            })
                                .catch((error) => {
                                    if (error.response.data.Errors) {
                                        const errors = error.response.data.Errors;
                                        for (let [key, value] of Object.entries(errors)) {
                                            toastr["error"](`${key}: ${value.toString()}`);
                                        }

                                    } else {
                                        toastr["error"](`@_localizer["Delete fail"],${error.response.data}`);
                                    }
                                });
                        }
                    }
                });

            }
        }
        var onExport = () => {
            var options = $dg.datagrid('options');
            var data = {
                filterRules: JSON.stringify(options.filterRules),
                sort: options.sortName,
                order: options.sortOrder,
            }
            axios.post('@Url.Page("/MigrationObjects/Index")?handler=Export',
                data,
                {
                    responseType: "blob"
                })
                .then(response => {
                    const filename = getFileName(response.headers['content-disposition']);
                    const url = window.URL.createObjectURL(new Blob([response.data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8' }));
                    const link = document.createElement('a');
                    link.href = url;
                    link.setAttribute('download', filename);
                    document.body.appendChild(link);
                    link.click();
                    toastr["info"](`@_localizer["Export successfully"]`);
                }).catch(error => {
                    if (error.response.data.Errors) {
                        const errors = error.response.data.Errors;
                        for (let [key, value] of Object.entries(errors)) {
                            toastr["error"](`${key}: ${value.toString()}`);
                        }

                    } else {
                        toastr["error"](`@_localizer["Export fail"],${error.response.data}`);
                    }
                })


        }


    </script>
}
