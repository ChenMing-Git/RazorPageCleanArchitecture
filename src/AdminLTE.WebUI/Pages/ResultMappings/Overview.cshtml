@page
@using CleanArchitecture.Razor.Domain.Enums
@using Microsoft.AspNetCore.Mvc.Localization
@using CleanArchitecture.Razor.Application.Constants.Permission
@model AdminLTE.WebUI.Pages.ResultMappings.OverviewModel
@inject Microsoft.Extensions.Localization.IStringLocalizer<OverviewModel> _localizer
@inject Microsoft.AspNetCore.Authorization.IAuthorizationService _authorizationService
@{
    ViewData["Title"] = _localizer["Migration Result Overview"].Value;
    ViewData["PageName"] = "resultmappings_overview";
    ViewData["Category1"] = _localizer["Value Mapping Cockpit"].Value;
    ViewData["Heading"] = _localizer["Migration Result Overview"].Value;
    ViewData["PageDescription"] = _localizer["See all available options"].Value;
    ViewData["PreemptiveClass"] = "Default";
}
@section HeadBlock {


<link rel="stylesheet" media="screen, print" href="~/css/fa-solid.css">
<link rel="stylesheet" media="screen, print" href="~/lib/easyui/themes/insdep/easyui.css">
<!-- Select2 -->
<link rel="stylesheet" href="~/plugins/select2/css/select2.min.css">
<link rel="stylesheet" href="~/plugins/select2-bootstrap4-theme/select2-bootstrap4.css">
<style>
    .datagrid-body
    .resultmapping_dg_datagrid-cell-c1-_action {
        overflow: visible !important;
    }

    .small::before,
    small::before {
        content: none !important;
    }

</style>
}
<div id="js-page-content-demopanels" class="card mb-g">
    <div class="card-header bg-white d-flex align-items-center">
        <h4 class="m-0">
            @_localizer["Migration Result Overview"]
   
           <div class="progress mb-3">
                <div class="progress-bar progress-bar bg-primary" role="progressbar" style="width: @(Model.Summarizing.First(x=>x.Status=="Not started").Percentage)%">@Model.Summarizing.First(x=>x.Status=="Not started").Total Not started</div>
                <div class="progress-bar progress-bar bg-info" role="progressbar" style="width:  @(Model.Summarizing.First(x=>x.Status=="Ongoing").Percentage)%">@Model.Summarizing.First(x=>x.Status=="Ongoing").Total Ongoing</div>
                <div class="progress-bar progress-bar bg-success" role="progressbar" style="width: @(Model.Summarizing.First(x=>x.Status=="Finished").Percentage)%">@Model.Summarizing.First(x=>x.Status=="Finished").Total Finished</div>
           </div>
        </h4>
        <div class="ml-auto">

            <button class="btn btn-sm btn-outline-primary " id="refreshbutton">
                <span class="@(Settings.Theme.IconPrefix) fa-sync mr-1"></span>
                @_localizer["Refresh"]
            </button>

            <button class="btn btn-sm btn-outline-primary " id="addbutton">
                <span class="@(Settings.Theme.IconPrefix) fa-plus mr-1"></span>
                @_localizer["New"]
            </button>
            <button class="btn btn-sm btn-outline-danger" disabled id="deletebutton">
                <span class="@(Settings.Theme.IconPrefix) fa-trash-alt mr-1"></span>
                @_localizer["Delete"]
            </button>
      


        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-12">
                <table id="resultmapping_dg">
                </table>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="resultmapping_modal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="overlay"><i class="fas fa-2x fa-sync-alt fa-spin"></i><div class="pt-2 pl-2 text-gray">Waiting...</div></div>
            <div class="modal-header">
                <h5 class="modal-title">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true"><i class="@(Settings.Theme.IconPrefix) fa-times"></i></span>
                </button>
            </div>
            <form id="resultmapping_form" class="needs-validation" novalidate="novalidate">
                <div class="modal-body">
                    @Html.AntiForgeryToken()
                    <input type="hidden" asp-for="Input.Id" />
                    <input type="hidden" asp-for="Input.TemplateFile" />
                    <input type="hidden" asp-for="Input.TemplateDescription" />
                    <div class="form-row">
                        <div class="col-md-12">
                            <label class="form-label" for=""></label>
                            <input type="file" asp-for="ResultMappingFile" style="display:none" required accept="text/xml" />
                            <div class="">
                                <button name="uploadresultmappingbutton" type="button" class="btn btn-primary btn-icon waves-effect waves-themed mr-2">
                                    <i class="fal fa-paperclip"></i> Upload Result Mapping File
                                </button><span class="text-danger">*</span>
                                <div id="uploadresultmappingfilename">
                                    <div class="alert alert-danger mt-2 mb-2" role="alert">
                                        <i class="fal fa-exclamation-triangle mr-2"></i>   @_localizer["Please upload a migration result mapping file."].
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 mb-2">
                            <label class="form-label" for="Name">@_localizer["Result Mapping Name"] <span class="text-danger">*</span></label>
                            <input type="text" asp-for="Input.Name" class="form-control" placeholder="Name" required="required" />
                            <span class="invalid-feedback" asp-validation-for="Input.Name">Sorry, you missed this one.</span>
                        </div>
                        <div class="col-md-6 mb-2">
                            <label class="form-label" for="Status">@_localizer["Status"] </label>
                            <input type="text" asp-for="Input.Status" class="form-control" placeholder="Status" readonly="readonly" />
                            <span class="invalid-feedback" asp-validation-for="Input.Status">Sorry, you missed this one.</span>
                        </div>
                        <div class="col-md-12 mb-2">
                            <label class="form-label" for="Description">@_localizer["Description"] </label>
                            <input type="text" asp-for="Input.Description" class="form-control" placeholder="@_localizer["Description"]" />
                            <span class="invalid-feedback" asp-validation-for="Input.Description">Sorry, you missed this one.</span>
                        </div>
                        <div class="col-md-4 mb-2">
                            <label class="form-label" for="LegacySystem">@_localizer["Location"]  <span class="text-danger">*</span></label>
                            <input type="text" asp-for="Input.LegacySystem" class="form-control" placeholder="@_localizer["Location"]" />
                            <span class="invalid-feedback" asp-validation-for="Input.LegacySystem">Sorry, you missed this one.</span>
                        </div>
                        <div class="col-md-4 mb-2">
                            <label class="form-label" for="RelevantMock">@_localizer["Relevant Mock"]  <span class="text-danger">*</span></label>
                            <select type="text" asp-for="Input.RelevantMock" class="select2bs4" asp-dictionaries-for="Itinerary" data-placeholder="Choose Relevant Mock" data-dropdown-css-class="select2-purple" style="width: 100%;">
                            </select>
                            <span class="invalid-feedback" asp-validation-for="Input.RelevantMock">Sorry, you missed this one.</span>
                        </div>

                        <div class="col-md-4 mb-2">
                            <label class="form-label" for="Team">@_localizer["Team"] </label>

                            <select type="text" asp-for="Input.Team" class="select2bs4" multiple="multiple" asp-dictionaries-for="Team" data-placeholder="Choose Team" data-dropdown-css-class="select2-purple" style="width: 100%;">
                            </select>

                            <span class="invalid-feedback" asp-validation-for="Input.Team">Sorry, you missed this one.</span>
                        </div>
                        

                    </div>
                    <div class="form-row">
                        <table class="table table-striped" id="fieldtable">
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">@_localizer["Close"]</button>
                    <button type="submit" name="savebutton" class="btn btn-primary">@_localizer["Save"]</button>
                </div>
            </form>
        </div>
    </div>
</div>


@section ScriptsBlock {
<partial name="_ValidationScriptsPartial" />

<script type="text/javascript" src="~/lib/easyui/jquery.easyui.min.js" asp-append-version="true"></script>
<script type="text/javascript" src="~/lib/easyui/plugins/datagrid-filter.js" asp-append-version="true"></script>
<script type="text/javascript" src="~/lib/easyui/jquery.easyui.component.js" asp-append-version="true"></script>
<script src="~/lib/easyui/plugins/datagrid-detailview.js"></script>
<script src="~/lib/jquery-form/jquery.jsonToForm.js"></script>

<script src="~/lib/easyui/plugins/datagrid-detailview.js"></script>
<!-- Select2 -->
<script src="~/plugins/select2/js/select2.full.min.js"></script>

<script type="text/javascript">
       var uploadresultmappingbutton = document.querySelector("button[name='uploadresultmappingbutton']");
       var uploadresultmappingfilename = document.querySelector("#uploadresultmappingfilename");
       var resultmappingfileinput = document.getElementById("ResultMappingFile");
       var savebutton = document.querySelector("button[name='savebutton']");
       const modalcontent= document.querySelector("#resultmapping_modal > div > .modal-content");
       const overlay = document.querySelector("#resultmapping_modal > div > .modal-content > .overlay");
       overlay.style.display="none";

       uploadresultmappingbutton.addEventListener('click', (e) => {
           resultmappingfileinput.click();
       })
        var vaildateresultmappingfile = () => {
           return new  Promise((resolve, reject) => {
               var form = document.querySelector('#resultmapping_form');
               var formData = new FormData(form);
               formData.set("ResultMappingFile", resultmappingfileinput.files[0]);
               axios({
                   url: '@Url.Page("/ResultMapping/Overview")?handler=VaildateResultMappingFile',
                   method: 'post',
                   data: formData,
                   processData: false,// 告诉axios不要去处理发送的数据(重要参数)
                   contentType: false,   // 告诉axios不要去设置Content-Type请求头
               }).then((response) => {
                   if (response.data.Data) {
                       if(response.data.Warnings){
                           toastr["warning"](response.data.Warnings[0]);
                       }
                       resolve(response.data.Data)
                   } else {
                       reject(response.data.Errors[0])
                   }
               }).catch(error => {
                   reject('throw exception')
               })
           });


       }

       resultmappingfileinput.onchange = () => {

           vaildateresultmappingfile().then(res => {
               console.log(res)
               $('#Input_TemplateDescription').val(res.TemplateDescription);
               $('#Input_Name').val(res.Name);
               $('#Input_Description').val(res.Description);
               $('#Input_LegacySystem').val(res.LegacySystem);
               $('#fieldtable').empty();
               let td1="";
               let td2="";
               res.FieldParameters.map(item=>{
                    td1 +=`<th>${item.FieldName}</th>`;
                    td2 +=`<td>${item.Description}</td>`;
               });
               $('#fieldtable').append(`<caption>Result Mapping Fields</caption>`)
               $('#fieldtable').append(`<thead><tr>${td1}</tr></thead>`)
               $('#fieldtable').append(`<tr>${td2}</tr>`)
               const uploadfileName = resultmappingfileinput.value.split('\\').pop() + `<b>(${res.TemplateDescription})</b>`;
               uploadresultmappingfilename.innerHTML = `
                <div class="alert alert-info alert-dismissible fadeup show mb-2 mt-2" role="alert">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true"><i class="@(Settings.Theme.IconPrefix) fa-times"></i></span>
                     </button>
                     <div class="d-flex align-items-center">
                           <div class="alert-icon">
                                   <i class="@(Settings.Theme.IconPrefix) fa-file-signature fs-xl mr-2"></i>
                           </div>
                           <div class="flex-1">
                                   ${uploadfileName}
                           </div>
                   </div>
                </div>`;
               savebutton.disabled = false;
               $('#uploadresultmappingfilename .alert').on('closed.bs.alert', (e) => {
                  resultmappingfileinput.value = null;
                  savebutton.disabled = true;
                  $('#Input_TemplateDescription').val('');
                  $('#Input_Name').val('');
               })
           }).catch((error) => {
               uploadresultmappingfilename.innerHTML = `
                 <div class="alert alert-warning alert-dismissible fadeup show mb-2 mt-2" role="alert">
                        <div class="d-flex align-items-center">
                           <div class="alert-icon">
                                   <i class="@(Settings.Theme.IconPrefix) fa-exclamation-triangle fs-xl mr-2"></i>
                           </div>
                           <div class="flex-1">
                                   ${error}
                           </div>
                   </div>
               </div>
               `;
               resultmappingfileinput.value = null;
               savebutton.disabled = true;
               toastr["error"](`${error}`);
           });



       };

       $('#refreshbutton').click(function () {
           reloadData();
       });

       $('#downloadtemplatebutton').click(function () {
           onDownloadFile();
       });
       $('#addbutton').click(function(){
            popupmodal(null);
       })
       $('#deletebutton').click(function () {
           onDeleteChecked();
       });

        $('#resultmapping_form :submit').click(function (e) {
           var form = document.querySelector('#resultmapping_form');
           if ($(form).valid() === false) {
               form.classList.add('was-validated');
           } else {
               event.preventDefault();
               event.stopPropagation();
               modalcontent.classList.add("overlay-wrapper");
               overlay.style.display="flex";
               var request = $('#resultmapping_form').serialize();
               var formData = new FormData(form);
               //formData.set("Input.RelevantObjects", $('#Input_RelevantObjects').select2('val').toString());
               formData.set("Input.Team", $('#Input_Team').select2('val').toString());
               formData.set("Input.RelevantMock ", $('#Input_RelevantMock').select2('val').toString());
               formData.set("Input.TemplateFile", $('#Input_TemplateFile').val());
               formData.set("ResultMappingFile", resultmappingfileinput.files[0]);
               axios({
                   url: '@Url.Page("/ResultMappings/Overview")',
                   method: 'post',
                   data: formData,
                   processData: false,// 告诉axios不要去处理发送的数据(重要参数)
                   contentType: false,   // 告诉axios不要去设置Content-Type请求头
               }).then((response) => {
                    modalcontent.classList.remove("overlay-wrapper");
                    overlay.style.display="none";
                       toastr["info"]('@_localizer["Saved successfully"]');
                       $('#resultmapping_modal').modal('toggle');
                       reloadData();
               }).catch(error => {
                    modalcontent.classList.remove("overlay-wrapper");
                    overlay.style.display="none";
                   if (error.response.data.Errors) {

                       const errors = error.response.data.Errors;
                       for (let [key, value] of Object.entries(errors)) {
                           toastr["error"](`${value.toString()}`);
                       }

                   } else {
                       toastr["error"](`${error.response.data.title}`);
                   }
               })

           }
           event.preventDefault();
           event.stopPropagation();
       })

       var $dg={};
       var initdatagrid = () => {
           $dg = $('#resultmapping_dg').datagrid({
               method: 'GET',
               rownumbers: false,
               singleSelect: true,
               selectOnCheck: false,
               checkOnSelect: false,
               pagination: true,
               clientPaging: false,
               remoteFilter: true,
               sortName: 'Id',
               sortOrder:'desc',
               pageSize: 15,
               fitColumns:true,
               pageList: [10, 15, 30, 50, 100, 1000],
               view: detailview,
               detailFormatter:function(index,row){
                 const width = window.screen.width-380;
                 const container=`<div class="p-3" style="height:680px;width:${width}px;position:relative;"><div class="card card-primary card-outline direct-chat direct-chat-primary">
                 <div class="card-header">
                   <h3 class="card-title">${row.Name}</h3>
                   <div class="card-tools">
                   <a href="javascript:onSetScope(${row.Id})" class="ml-2 btn btn-sm  btn-outline-danger">
                     <span class="@(Settings.Theme.IconPrefix) fa-flag mr-1"></span>
                     Select/Unselect scope
                   </a>
                   <a href="javascript:onVerify(${row.Id})" class="ml-2 btn btn-sm  btn-outline-primary">
                     <span class="@(Settings.Theme.IconPrefix) fa-calendar-check mr-1"></span>
                     Verify/Unverified
                   </a>
                   <a href="javascript:onDownloadWithDatagrid(${row.Id},${index})" class="ml-2 btn btn-sm  btn-outline-primary">
                     <span class="@(Settings.Theme.IconPrefix) fa-download mr-1"></span>
                     Download Data
                   </a>
                   </div>
                   <div  class="d-flex progress-container " >
                    <div class="progress" id="progress_${row.Id}">
                      <div class="progress-bar progress-bar-striped progress-bar-animated bg-success" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%"></div>
                    </div>
                    <small class="progress_labe">0% Verified</small>
                   </div>
                 </div>
                 <div class="card-body">
                   <div class="table-responsive">
                   <table id="datatable_${row.Id}" class="resultmappingdata_dg"></table>
                   </div>
                   <div class="d-flex flex-row">
                      <div class="p-2">
                        Tooltip:
                     </div>
                     <div class="p-2">
                       <i class="nav-icon far fa-circle text-danger text-lg"></i> Selected
                     </div>
                     <div class="p-2">
                       <i class="nav-icon far fa-circle text-success text-lg"></i> Verified
                     </div>
                   </div>
                 </div>
                 </div></div>`
                       return container;
                   },
               onCollapseRow:function(index,row){
                  const panel = $(`#datatable_${row.Id}`).datagrid('getPanel');
                  panel.panel('destroy');
                  $(this).datagrid('getRowDetail',index).find(`.table-responsive`).html(`<table id="datatable_${row.Id}"></table>`);
               },
               onExpandRow: function(index,row){
                   //console.log(row);
                   const columns = getcolumens(row);
                   const subgrid = $(this).datagrid('getRowDetail',index).find(`#datatable_${row.Id}`);
                   const tools = $(this).datagrid('getRowDetail',index).find(`.progress-container`);
                   //console.log(subgrid.width());
                   const suburl='@Url.Page("/ResultMappings/Overview")?handler=ResultMappingData&Id=' + row.Id;
                   subgrid.datagrid({
                        width:window.screen.width-405,
                        height: 510,
                        method: 'GET',
                        selectOnCheck: false,
                        checkOnSelect: false,
                        singleSelect:false,
                        rownumbers: false,
                        pagination: true,
                        clientPaging: false,
                        remoteFilter: true,
                        sortName: 'Id',
                        sortOrder:'asc',
                        pageSize: 10,
                        pageList: [10, 30, 50, 100, 1000],
                        columns: [columns],
                        onLoadSuccess:function() {
                             const getverifiedurl='@Url.Page("/ResultMappings/Overview")?handler=SummarizingVerified&Id=' + row.Id;
                             axios.get(getverifiedurl).then(result=>{
                                 tools.empty();
                                 for (const [ key, value ] of Object.entries(result.data)) {
                                   tools.append(`<div class="pl-2" style="width:150px" ><div class="progress" id="progress_${row.Id}">
                                                   <div class="progress-bar progress-bar bg-success" role="progressbar" aria-valuenow="${value[0]}" aria-valuemin="0" aria-valuemax="100" style="width: ${value[0]}%"></div>
                                                 </div>
                                                 <small class="progress_labe">
                                                   ${value[0]}% Verified By ${key}
                                                 </small></div>`)
                                 }
                                 
                             });
                             const ownerfilter = subgrid.datagrid('getFilterComponent','Owner');
                             ownerfilter.combobox('reload');
                              const td= $('.table-responsive tr.datagrid-filter-row > td').eq(0);
                          td.html('<i class="ml-2 fal fa-filter"></i>')
                        },
                        onBeforeSelect:function(index,row){
                            console.log(row);
                        },
                        onBeforeUnselect:function(index,row){
                            console.log(row);
                        }
       
                   }).datagrid('enableFilter', [
                       {
                           field:'Owner',
                           type:'combobox',
                           options:{
                               url:'@Url.Page("/ResultMappings/Overview")?handler=OwnerList&id=' + row.Id,
                               panelHeight:'auto',
                               valueField:'text',
                               textField:'text',
                               method:'GET',
                               onChange: function (item) {
                               if(item){
                                subgrid.datagrid('addFilterRule', {
                                  field: 'Owner',
                                  op: 'equal',
                                  value: item
                                });
                                 subgrid.datagrid('doFilter');
                               }else{
                                 subgrid.datagrid('removeFilterRule', 'Owner'	                          );
                                 subgrid.datagrid('doFilter');
                               }
                              }
                           }
                       },
                       {
                        field:'Verify',
                        type:'combobox',
                        options:{
                          valueField:'id',
                          textField:'text',
                          panelHeight:'auto',
                          data:[
                             {id:'',text:'ALL'},
                             {id:'Verified',text:'Verified'},
                             {id:'Selected',text:'Selected'},
                             {id:'Unselected',text:'Unselected'},
                          ],
                         onChange: function (item) {
                            if(item){
                                subgrid.datagrid('addFilterRule', {
                                  field: 'Verify',
                                  op: 'equal',
                                  value: item
                                });
                                 subgrid.datagrid('doFilter');
                            }else{
                                 subgrid.datagrid('removeFilterRule', 'Verify'	                          );
                                 subgrid.datagrid('doFilter');
                            }
                           }
                   }
                   }]).datagrid('load',suburl);

               },
               onBeforeLoad: function () {
                   $('#deletebutton').prop('disabled', true);
               },
               onCheckAll: function (rows) {
                   const checked = $(this).datagrid('getChecked').length > 0;
                   $('#deletebutton').prop('disabled', !checked);
               },
               onUncheckAll: function () {
                   $('#deletebutton').prop('disabled', true);
               },
               onCheck: function () {
                   $('#deletebutton').prop('disabled', false);
               },
               onUncheck: function () {
                   const checked = $(this).datagrid('getChecked').length > 0;
                   $('#deletebutton').prop('disabled', !checked);
               },
               onLoadSuccess:function(){
                  const td= $('.card-body tr.datagrid-filter-row > td').eq(1);
                  td.html('<i class="ml-2 fal fa-filter"></i>')
               },
               columns: [[
                   { field: 'ck', checkbox: true },
                   {
                       field: '_action',
                       title: '@_localizer["Command"]',
                       width: 100,
                       align: 'center',
                       formatter: function (value, row, index) {
                           return `<div class="btn-group" role="group">
                                     <a id="commandbtngroup" type="button"  class="btn btn-outline-primary btn-sm dropdown-toggle waves-effect waves-themed" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                       <i class="@(Settings.Theme.IconPrefix) fa-edit"></i>
                                    </a>
                                    <div class="dropdown-menu dropdown-menu-animated" aria-labelledby="commandbtngroup">
                                      <button class="dropdown-item" onclick="onEdit(${index})" > @_localizer["Edit Result Mapping"]</button>
                                      <button class="dropdown-item" onclick="onDownload(${index})" > @_localizer["Download Data"]</button>
                                    </div>
                                  </div>`;
                       }
                   },
                   { field: 'RelevantMock',
                     title: '@_localizer["Mock"]',
                     sortable: true,
                     width: 140
                   },
                   {   field: 'Status',
                       title: '@_localizer["Status"]',
                       sortable: true,
                       width: 120,
                       align:'center',
                       formatter:function(value){
                           if(value=='Not started') {
                               return `<span class="right badge badge-secondary">${value}</span>`
                           }else if(value=='Ongoing') {
                               return `<span class="right badge badge-info">${value}</span>`
                           }else{
                               return `<span class="right badge badge-success">${value}</span>`
                           }

                       }
                   },
                   { field: 'Team',
                     title: '@_localizer["Team"]',
                     sortable: true,
                     width: 160,
                     formatter:function(value){
                      if(value){
                          const word = value.split(',');
                          let label ='';
                          for(i=0;i<word.length;i++){
                              if(i==0){
                                  label =`<span style="text-decoration: underline!important;">${word[i]}</span>`
                              } else {
                                  label+= `, <small>${word[i]}</small>`
                              }
                          }
                          return label;
                      }
                  }
                   },
                   { field: 'LegacySystem', title: '@_localizer["Location"]', sortable: true, width: 180 },
                   { field: 'Name',
                     title: '@_localizer["Result Mapping Name"]',
                     sortable: true,
                     formatter:function(value,row,index){
                         return `<a> ${value??''} </a> <br> <small data-toggle="tooltip" title="${row.Description}">${row.Description??''}</small> `;
                     },
                     width: 300
                   },
                   { field: 'Verify',
                     title: '@_localizer["Verify Progress"]',
                     sortable: true,
                     align:'center',
                     width: 180,
                     formatter:function(v,row,index){
                         const total = row.Total;
                         let verified=0;
                         if(row.Total>0){
                             verified = Math.round((row.Verified/total)*100);
                         }
                         return `<div class="progress mt-1 mb-1">
                                   <div class="progress-bar bg-success" role="progressbar" style="width: ${verified}%" aria-valuenow="${verified}" aria-valuemin="0" aria-valuemax="100">${row.Verified} / ${row.Total}</div>
                                 </div>
                                 <small>${verified}% Verified</small>
                                 `
                     }
                   },
                   { field: 'CreatedBy', title: '@_localizer["Created By"]', sortable: true, width: 160 },
                   { field: 'LastModifiedBy', title: '@_localizer["Last Modified By"]',  sortable: true, width: 160 },

               ]]
           })
               .datagrid('enableFilter', [
               {
                   field:'Status',
                   type:'combobox',
                   options:{
                       valueField:'id',
                       textField:'text',
                       panelHeight:'auto',
                       data:[
                           {id:'',text:'ALL'},
                           {id:'Not started',text:'Not started'},
                           {id:'Ongoing',text:'Ongoing'},
                           {id:'Finished',text:'Finished'},
                        ],
                       onChange: function (item) {
                            if(item){
                                $dg.datagrid('addFilterRule', {
                                  field: 'Status',
                                  op: 'equal',
                                  value: item
                                });
                                $dg.datagrid('doFilter');
                            }else{
                                $dg.datagrid('removeFilterRule', 'Status'	                          );
                                $dg.datagrid('doFilter');
                            }
                           }
                   }
               }])
               .datagrid('load', '@Url.Page("/ResultMappings/Overview")?handler=Data');

       }
       var getcolumens = (row) =>{
            let columns=[{field:'ck',checkbox: true},
                   {field: 'Verify',
                     title: '@_localizer["Verify"]',
                     sortable: true,
                     width: 100,
                     align:'center',
                     formatter:function(v){
                         if(v=='Verified')
                           return '<i class="nav-icon far fa-circle text-success text-lg"></i>';
                         else if(v=='Selected')
                           return '<i class="nav-icon far fa-circle text-danger text-lg"></i>';
                         else
                          return '';
                     }
                   },
                   {
                           field: 'Owner',
                           title: '@_localizer["Owner"]',
                           sortable: true,
                           width: 140,
                       }
                       
            ];
            row.FieldParameters.map((item,index)=>{
               columns.push({
                           field: `Field${index+1}`,
                           title: `${item.FieldName}<br><small>${item.Description??''}</small>`,
                           sortable: true,
                           width: 160
                       });
           });
           columns.push({
                           field: 'CreatedBy',
                           title: '@_localizer["Created By"]',
                           sortable: true,
                           width: 160,
                       }
                       );
          
          return columns;
       }

       var reloadData = () => {
           $dg.datagrid('reload');
       }

       $(() => {
            $('.select2bs4').select2({
               theme: 'bootstrap4',
               dropdownParent: $('#resultmapping_modal')
           })
           initdatagrid();
       })

       var onEdit = (index) => {
           var document = $dg.datagrid('getRows')[index];
           popupmodal(document);
       }
       var popupmodal = (document) => {
           $('#resultmapping_modal').modal('toggle');
           $('#resultmapping_modal .modal-title').html('@_localizer["New Result Mapping"]');
           $('#resultmapping_form').clearForm();
           $('#resultmapping_form')[0].reset();
           if (document) {
               uploadresultmappingbutton.disabled = false;
               resultmappingfileinput.required = false;
               $('#resultmapping_modal .modal-title').html('@_localizer["Edit Result Mapping"]');

               $('#resultmapping_form').jsonToForm(document, {
                   TemplateDescription:function(value){
                        $('#Input_TemplateDescription').val(value)
                   },
                   TemplateFile: function (value) {
                       const description= $('#Input_TemplateDescription').val();
                       $('#Input_TemplateFile').val(value)
                       if (value && value.length > 0) {
                           uploadresultmappingfilename.innerHTML = `
                           <div class="alert alert-info alert-dismissible fadeup show mb-2 mt-2" role="alert">
                             <div class="d-flex align-items-center">
                               <div class="alert-icon">
                                   <i class="@(Settings.Theme.IconPrefix) fa-upload fs-xl mr-2"></i>
                               </div>
                               <div class="flex-1">
                                   ${value}<b>(${description})</b>
                               </div>
                             </div>
                           </div>
                           `
                       } else {
                           savebutton.disabled = true;
                           uploadresultmappingfilename.innerHTML = ` <div class="alert alert-danger mt-2 mb-2" role="alert">
                                       <i class="fal fa-exclamation-triangle mr-2"></i>   @_localizer["Please upload a migration result mapping file."].
                                   </div>`;
                       }
                   },
                   RelevantMock: function (value) {
                       if (value) {
                           $('#Input_RelevantMock').val(value.split(',')).change();
                       } else {
                           $('#Input_RelevantMock').val(null).change();
                       }
                   },
                   Team: function (value) {
                       if (value) {
                           $('#Input_Team').val(value.split(',')).change();
                       } else {
                           $('#Input_Team').val(null).change();
                       }
                   }

               })
               $('#fieldtable').empty();
               let td1="";
               let td2="";
               document.FieldParameters.map(item=>{
                    td1 +=`<th>${item.FieldName}</th>`;
                    td2 +=`<td>${item.Description}</td>`;
               });
               $('#fieldtable').append(`<caption>Result Mapping Fields</caption>`)
               $('#fieldtable').append(`<thead><tr>${td1}</tr></thead>`)
               $('#fieldtable').append(`<tr>${td2}</tr>`)
           } else {
               $('#fieldtable').empty();
               $('#Input_Team').val(null).change();
               savebutton.disabled = true;
               uploadresultmappingbutton.disabled = false;
               resultmappingfileinput.required = true;
               $('#resultmapping_form #Input_Id').val(0);
               $('#resultmapping_form #Input_TemplateFile').val('');
               $('#resultmapping_form #Input_Status').val('Not started');
               uploadresultmappingfilename.innerHTML =`<div class="alert alert-danger mt-2 mb-2" role="alert">
                                       <i class="fal fa-exclamation-triangle mr-2"></i>   @_localizer["Please upload a migration result mapping file."].
                            </div>`
           }
       }
        var onDeleteChecked = () => {
           var checkedId = $dg.datagrid('getChecked').map(x => x.Id);
           if (checkedId.length > 0) {
               bootbox.confirm({
                   message: "@_localizer["Are you sure to delete the selected result mapping?"]",
                   buttons: {
                       confirm: {
                           label: '@_localizer["Yes"]',
                           className: 'btn-success'
                       },
                       cancel: {
                           label: '@_localizer["No"]',
                           className: 'btn-danger'
                       }
                   },
                   callback: function (result) {
                       if (result) {
                         
                           axios.post('@Url.Page("/ResultMappings/Overview")?handler=DeleteChecked',{id:checkedId}).then(res => {
                               toastr["info"](`@_localizer["Deleted ${checkedId.length} rows"]`);
                               reloadData();
                           })
                               .catch((error) => {
                                   if (error.response.data.Errors) {
                                       const errors = error.response.data.Errors;
                                       for (let [key, value] of Object.entries(errors)) {
                                           toastr["error"](`${value.toString()}`);
                                       }

                                   } else {
                                       toastr["error"](`${error.response.data}`);
                                   }
                               });
                       }
                   }
               });

           }
       }

       var onVerify =(id)=>{
           var selected=$(`#datatable_${id}`).datagrid('getChecked');
           if(selected.length>0) {
               if(selected.filter(x=>x.Verify == "Unselected").length>0){
                   bootbox.alert({
                      message: "@_localizer["Please select the status 'selected' records to verify."]"
                   });
                   return false;
               }
               const userid='@User.GetUserId()';
       
               if(selected.filter(x=>x.Owner != userid).length>0){
                   bootbox.alert({
                      message: "@_localizer["Please select your owner record"]"
                   });
                   return false;
               }
               const selectedId=selected.map(x=>x.Id);
               const url= '@Url.Page("/ResultMappings/Overview")?handler=Verify';
               axios.post(url, {Id:selectedId })
                        .then(response => {
                            toastr["info"]('@_localizer["Verified successfully"]');
                            const suburl='@Url.Page("/ResultMappings/Overview")?handler=ResultMappingData&Id=' + id;
                            $(`#datatable_${id}`).datagrid('reload');
                        }).catch(error => {
                            if (error.response.data.Errors) {
                                const errors = error.response.data.Errors;
                                for (let [key, value] of Object.entries(errors)) {
                                    toastr["error"](`${value.toString()}`);
                                }

                            } else {
                                toastr["error"](`${error.response.data}`);
                            }

                        });
           }else{
                bootbox.alert({
                  message: "@_localizer["Please select the status 'selected' records to verify."]"
                });
           }
       }
       var onSetScope =(id) =>{
           var selected=$(`#datatable_${id}`).datagrid('getChecked');
           if(selected.length>0){
               if(selected.filter(x=> x.Verify == "Verified").length>0){
                   bootbox.alert({
                      message: "@_localizer["Please select the status 'unselected' records."]"
                   });
                   return false;
               }
               const url= '@Url.Page("/ResultMappings/Overview")?handler=Scoped';
               const selectedId=selected.map(x=>x.Id);
               axios.post(url, {Id:selectedId })
                        .then(response => {
                            toastr["info"]('@_localizer["Selected successfully"]');
                             const suburl='@Url.Page("/ResultMappings/Overview")?handler=ResultMappingData&Id=' + id;
                             $(`#datatable_${id}`).datagrid('reload');
                        }).catch(error => {
                            if (error.response.data.Errors) {
                                const errors = error.response.data.Errors;
                                for (let [key, value] of Object.entries(errors)) {
                                    toastr["error"](`${value.toString()}`);
                                }

                            } else {
                                toastr["error"](`${error.response.data}`);
                            }

                        });
           }else{
                bootbox.alert({
                  message: "@_localizer["Please select the status 'unselected' records."]"
                });
           }
       }

       var onFinished =(id)=>{
          const url= '@Url.Page("/ResultMappings/Overview")?handler=Finished&Id=' + id;
         axios.get(url).then(res => {
                                toastr["info"](`@_localizer["Finished"]`);
                                reloadData();
                            })
                                .catch((error) => {
                                    if (error.response.data.Errors) {
                                        const errors = error.response.data.Errors;
                                        for (let [key, value] of Object.entries(errors)) {
                                            toastr["error"](`${value.toString()}`);
                                        }

                                    } else {
                                        toastr["error"](`${error.response.data}`);
                                    }
                                });
       }
       var onDownloadFile = ()=> {
           const items = $dg.datagrid('getChecked');
           if(items.length==0){
                bootbox.alert({
                  message: "@_localizer["Please select the records to download."]"
                });
           }
           items.map(item=>{

                       const filename = getFileName(item.TemplateFile);
                       const url = '/' + item.TemplateFile;
                       const link = document.createElement('a');
                       link.href = url;
                       link.setAttribute('download', filename );
                       document.body.appendChild(link);
                       link.click();

           });
       }
       var onDownloadWithDatagrid = (id,index) => {
            const item = $dg.datagrid('getRows')[index];
            var options = $(`#datatable_${id}`).datagrid('options');
            var data = {
                filterRules: JSON.stringify(options.filterRules),
                sort: options.sortName,
                order: options.sortOrder,
                Id:item.Id,
                Name:item.Name
            }
            axios.post('@Url.Page("/ResultMappings/Overview")?handler=DownloadData',
                data,
                {
                    responseType: "blob"
                })
                .then(response => {
                    const filename = getFileName(response.headers['content-disposition']);
                    const url = window.URL.createObjectURL(new Blob([response.data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8' }));
                    const link = document.createElement('a');
                    link.href = url;
                    link.setAttribute('download', filename);
                    document.body.appendChild(link);
                    link.click();
                    toastr["info"](`@_localizer["Download successfully"]`);
                }).catch(error => {
                    if (error.response.data.Errors) {
                        const errors = error.response.data.Errors;
                        for (let [key, value] of Object.entries(errors)) {
                            toastr["error"](`${value.toString()}`);
                        }

                    } else {
                        toastr["error"](`@_localizer["Export fail"]`);
                    }
                })


        
       }
       var onDownload=(index)=>{
            const item = $dg.datagrid('getRows')[index];
            var data = {
                Id:item.Id,
                Name:item.Name
            }
            axios.post('@Url.Page("/ResultMappings/Overview")?handler=DownloadData',
                data,
                {
                    responseType: "blob"
                })
                .then(response => {
                    const filename = getFileName(response.headers['content-disposition']);
                    const url = window.URL.createObjectURL(new Blob([response.data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8' }));
                    const link = document.createElement('a');
                    link.href = url;
                    link.setAttribute('download', filename);
                    document.body.appendChild(link);
                    link.click();
                    toastr["info"](`@_localizer["Download successfully"]`);
                }).catch(error => {
                    if (error.response.data.Errors) {
                        const errors = error.response.data.Errors;
                        for (let [key, value] of Object.entries(errors)) {
                            toastr["error"](`${value.toString()}`);
                        }

                    } else {
                        toastr["error"](`@_localizer["Download fail"]`);
                    }
                })


        
       }
       var getFileName = (disposition) => {
          const utf8FilenameRegex = /filename\*=UTF-8''([\w%\-\.]+)(?:; ?|$)/;
          const asciiFilenameRegex = /filename=(["']?)(.*?[^\\])\1(?:; ?|$)/;
          let fileName = '';
          if (utf8FilenameRegex.test(disposition)) {
            fileName = decodeURIComponent(utf8FilenameRegex.exec(disposition)[1]);
          } else {
            const matches = asciiFilenameRegex.exec(disposition);
            if (matches != null && matches[2]) {
                fileName = matches[2];
            }
        }
        return fileName;
    }
</script>
}
